11-01
    1.半透明边框实现
        rgba();
        HSLA（色调，饱和度，亮度，α）色相是在色轮上的程度（从0到360）-0（或360）是红色的，120是绿色的，240是蓝色的。饱和度是一个百分比值;0％意味着灰色和100％的阴影是全彩。亮度也是一个百分点;0％是黑色的，100％是白色的.
        .demo{
            border:10px solid hsla(0,30%,50%,.5);
            background:white;
            background-clip:padding-box;
        }
    2.多重边框
        box-shadow 方案
            | h-shadow | 必需。水平阴影的位置，允许负值 |
            | v-shadow | 必需。垂直阴影的位置，允许负值 |
            | blur | 可选。模糊距离 |
            | spread | 可选。阴影的大小 |
            | color | 可选。阴影的颜色 |
            | inset | 可选。从外层的阴影（开始时）改变阴影内侧阴影 |
            .demo{
                background:yellow;
                box-shadow:0 0 0 5px red,0 0 0 10px deeppink;
            }
        outline 方案border+outline可实现两层边框
            .demo{
                border:10px solid #333;
                outline:5px solid #666;
            }
    3.灵活的背景定位
        对于固定尺寸的容器方案
            background-position;
        background-position的扩展语法方案
            background-position : right 20px bottom 10px;
            以上代码表示让背景图片跟右边缘保持 20 px 的偏移量，同时跟底边保持 10px 的偏移量。
        background-origin方案
            background-origin: content-box;
            background-position:;
        calc()方案
            background-position : calc(100% - 20px) calc(100% - 10px);
            以上代码的效果也是让背景图片跟右边缘保持 20 px 的偏移量，同时跟底边保持 10px 的偏移量。
            注：在 calc() 函数内部的 - 和 + 运算符的两侧各加 一个空白符，否则会产生解析错误。此举是为了向前兼容： 未来，在 calc() 内部可能会允许使用关键字， 而这些关键字可能会包含连字符（即减号）
    4. 边框内圆角
        两个元素实现
            .parent { background : #655; padding : .8em; }
            .parent > div { background : tan; border-radius : .8em; padding : 1em; }
        一个元素实现
            .demo{border-radius : .8em; 
                padding: 1em; 
                box-shadow : 0 0 0 .6em #655; 
                outline : .6em solid #655;
            }
    5.条纹背景
        水平条纹
            background: linear-gradient(red 30%,blue 30%);
            background-size:100% 10px;
        垂直条纹
            background: linear-gradient(90deg,red 30%,blue 30%);
            background-size:10px 100%;
        斜向条纹
            background : linear-gradient(45deg, #fb3 25%, #58a 0, #58a 50%, #fb3 0, #fb3 75%, #58a 0); 
            background-size : 30px 30px;
        格纹条纹
            background: linear-gradient(45deg,red 50%,blue 50%);
            background-size:10px 10px;
        更好的斜向条纹
            background : repeating-linear-gradient(45deg, #fb3, #58a 30px);
            相当于
            background: linear-gradient(45deg, #fb3, #58a 30px, #fb3 30px, #58a 60px, #fb3 60px, #58a 90px, #fb3 90px, #58a 120px, #fb3 120px, #58a 150px, ...);
        灵活的同色系条纹
            当条纹图案由差异不大的颜色组成时，按照上面提供的方法，我们可能需要这样写 CSS：
            background : repeating-linear-gradient(30deg, #79b, #79b 15px, #58a 0, #58a 30px);
            
11-02
    1.怎么实现OOP
        javascript 面向对象编程（一）：封装 将各个不同部分放于构造函数中，将公共部分放于prototype中。
            function Cat(name,color){
                //不同部分
        　　　　this.name = name;
        　　　　this.color = color;
        　　}
            //公共部分
        　　Cat.prototype.type = "猫科动物";
        　　Cat.prototype.eat = function(){alert("吃老鼠")};
            isPrototypeOf()某个proptotype对象和某个实例之间的关系   alert(Cat.prototype.isPrototypeOf(cat1)); //true
            hasOwnProperty()用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。     alert(cat1.hasOwnProperty("name")); // true
            in运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。    alert("name" in cat1);//true
            
        javascript面向对象编程（二）：构造函数的继承，对象之间的"继承"的五种方法。
            ①.构造函数绑定   使用call或apply方法，将父对象的构造函数绑定在子对象上，即在子对象构造函数中加一行：
                function Animal(){　　　　this.species = "动物";　　}
                function Cat(name,color){
            　　　　Animal.apply(this, arguments);
            　　　　this.name = name;
            　　　　this.color = color;
            　　}
            　　var cat1 = new Cat("大毛","黄色");
            　　alert(cat1.species); // 动物
            ②.prototype模式    如果"猫"的prototype对象，指向一个Animal的实例，那么所有"猫"的实例，就能继承Animal了。
                Cat.prototype = new Animal();   //我们将Cat的prototype对象指向一个Animal的实例。
    　　        Cat.prototype.constructor = Cat;   //任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有"Cat.prototype = new Animal();"这一行，Cat.prototype.constructor是指向Cat的；加了这一行以后，Cat.prototype.constructor指向Animal。
                这是很重要的一点，编程时务必要遵守。下文都遵循这一点，即如果替换了prototype对象，
            　　o.prototype = {};
                那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。
            　　o.prototype.constructor = o;
            ③.直接继承prototype
                改写Animal对象
                function Animal(){ }　　Animal.prototype.species = "动物";
                Cat.prototype = Animal.prototype;　　
                Cat.prototype.constructor = Cat;
                问题：这一句实际上把Animal.prototype对象的constructor属性也改掉了！ alert(Animal.prototype.constructor); // Cat
            ④.利用空对象作为中介
                由于"直接继承prototype"存在上述的缺点，所以就有第四种方法，利用一个空对象作为中介。
                var F = function(){};
            　　F.prototype = Animal.prototype;
            　　Cat.prototype = new F();
            　　Cat.prototype.constructor = Cat;
                //封装成函数
                function extend(Child, Parent) {
            　　　　var F = function(){};
            　　　　F.prototype = Parent.prototype;
            　　　　Child.prototype = new F();
            　　　　Child.prototype.constructor = Child;
            　　　　Child.uber = Parent.prototype;
                    //意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。（uber是一个德语词，意思是"向上"、"上一层"。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。
            　　}
            ⑤.拷贝继承
                改写
                function Animal(){}
    　　        Animal.prototype.species = "动物";
                function extend2(Child, Parent) {
            　　　　var p = Parent.prototype;
            　　　　var c = Child.prototype;
            　　　　for (var i in p) {
            　　　　　　c[i] = p[i];
            　　　　　　}
            　　　　c.uber = p;
            　　}
        javascript面向对象编程（三）：非构造函数的继承
            ①.这两个对象都是普通对象，不是构造函数，无法使用构造函数方法实现"继承"
                var Chinese = {
        　　　　    nation:'中国'
                　};
                还有一个对象，叫做"医生"。
                var Doctor ={
                　　career:'医生'
                };
            ②.object()方法
                var Chinese = {
            　　　　nation:'中国'
            　　};
                function object(o) {
                    function F(){}
                    F.prototype = o;
                    return new F();
                }
                var Doctor =object(Chinese);
                Doctor.career = "医生";
                console.dir(Doctor);
            ③.浅拷贝
                var Chinese = {
        　　　　    nation:'中国'
            　　};
                function extendCopy(p) {
                    var c = {};
                    for(var i in p){
                        c[i] = p[i];
                    }
                    c.uber = p;
                    return c;
                }
                var Doctor =extendCopy(Chinese);
                Doctor.career = "医生";
                console.dir(Doctor);
                但是，这样的拷贝有一个问题。那就是，如果父对象的属性等于数组或另一个对象，那么实际上，子对象获得的只是一个内存地址，而不是真正拷贝，因此存在父对象被篡改的可能。
            ④.深拷贝  jQuery库使用的就是这种继承方法。
                var Chinese = {
        　　　　    nation:'中国'
            　　};
                var Doctor = {
                    carreer:"医生"
                }
                function deepCopy(p,c) {
                    var c = c || {};
                    for(var i in p){
                        if(typeof p[i] === 'object'){
                            c[i] = (p[i].constructor === Array) ? [] : {};
                            deepCopy(p[i],c[i]);
                        }else{
                            c[i] = p[i];
                        }
                    }
                    return c;
                }
                deepCopy(Chinese,Doctor);
                console.dir(Doctor);
    2.为什么要用 OOP
        OOP是为了提高代码的复用性，而提高代码复用性的根本原因是为了降低内存的使用率。
    3.JS中如何实现 OOP
        ①.工厂模式
            function person(name,age){
                var o = new Object();
                o.name = name;
                o.age = age;
                o.sayName = function(){
                    console.log(o.name);
                };
                return o;
            }
            var p1 = person('jizq',19);
            p1.sayName();
        ②.构造器模式
            function Person(name,age){
                this.name = name;
                this.age = age;
                this.sayName = function(){
                    alert(this.name);
                };
            }
            var p1 = new Person('jizq',19);
            p1.sayName();
        ③.原型模式（应该重点查看的模式）
            关于 constrcutor 和实例，以及和 prototype 之间的关系，如下所示：
            p1.constructor == p2.constructor == Person.prototype.constructor == Person
            // 1. 创建一个构造器
            function Person() {}
            // 2. 创建一个构造器原型
            Person.prototype.name = 'jizq';
            Person.prototype.age = 28;
            Person.prototype.sayName = function() {
                console.log(this.name)
            };
            // 3. 由构造器创建两个实例
            var p1 = new Person(),
                p2 = new Person();
            p1.sayName(); // jizq
            p2.sayName(); // jizq
            
            // 4. 查看这两个实例之间的关系
            console.log(p1.sayName == p2.sayName); // true
        ④.ES6中的 class
            用class创建对象
            class Leader{
                constructor(name){//constructor构造函数
                    this.name=name;
                }
                hello(){//定义在原型上的函数
                    alert('Hello, '+this.name+'!');
                }
            }
            var liyi= new Leader('liyi');
            用extends继承扩展
            class extendLeader extends Leader{
                constructor(name,grade,skill){//若是不扩展Leader的构造函数，就可以将constructor这一步省去
                    super(name);
                    this.grade=grade;
                    this.skill=skill;
                }
                run(){
                    console.log(this.name+'职位：'+this.grade+' 技能：'+this.skill);
                }
            }
11-03(最近加班比较多有时间就看算法)
    对js里bind函数的理解
        function tt(){
          console.log(arguments.callee == tt);
          console.log(this);
        }
        tt();//会输出 true ，window
        var i = '1';
        var i1 = tt.bind(i);
        i1();//会输出 true ，string
        理解第一次输出true ，window 因为该函数在window下调用所以this为window
        第二次输出true ，string 函数一旦经过bind，即便指定了调用者，那么this仍然是bind指定的this，也就是"1"。
    
    
    
    
    
    
    
    
    
    

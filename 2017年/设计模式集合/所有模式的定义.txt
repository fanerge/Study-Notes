1.工厂模式（Factory）：
	使用一个方法来确定要创建哪个类的实例，通常这些实例具有相同的接口。
2.单例模式（Single）：
	一个类至多有一个实例。
3.观察者模式（Publish-Subscribe）：
	一种一对多的关系，当发布者发布消息，依赖它的订阅者都将得到消息。
4.适配器模式（Adapter）、包装模式：
	将一个类的接口（不兼容）转化为符合客户要求的接口。
5.代理模式（Proxy）：
	为其他对象提供一种代理以控制对它的访问。
6.门面模式、外观模式（Facede）：	
	提供一个统一的接口去访问多个子系统的不同接口，为多个子系统的不同接口提供一个更高层的接口，使得子系统更容易使用。
7.访问者模式（Visitor）：
	先把一些可复用的行为抽象到函数（对象）中，这个函数我们就称为访问者函数，如果另一些对象要调这个函数，只需把对象当作参数传递给这个函数。
	js中常用一个call、apply函数传递this给访问者函数。
8.策略模式（Strategy）：
	定义一系列算法，并将每个算法封装起来，而且使他们还可以相互替换。
	目的将算法的实现和使用分离开来。
9.模版方法模式（TemplateMethod）
	定义了一个操作中的算法的骨架，而将一些步骤延迟到子类。
	先把不变的部分抽象到父类，把可变的部分延迟到子类实现。
10.中介者模式
	一种多对多的关系，用一个中介者对象来封装一系列的对象交互。
11.迭代模式
	提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
vuex学习，Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。
安装
	npm install vuex --save
	yarn add vuex
	import Vue from 'vue'
	import Vuex from 'vuex'

	Vue.use(Vuex)
	解决的问题
		多个视图依赖于同一状态。
		来自不同视图的行为需要变更同一状态。
开始
	const store = new Vuex.Store({
	  state: {
		count: 0
	  },
	  mutations: {
		increment (state) {
		  state.count++
		}
	  }
	})
	在组件的methods使用：
		store.commit('increment')
核心概念
State
	单一状态树 	
		用一个对象就包含了全部的应用层级状态。
	在 Vue 组件中获得 Vuex 状态
		在组件中的计算属性中返回状态
		const Counter = {
		  template: `<div>{{ count }}</div>`,
		  computed: {
			count () {
			  return store.state.count
			}
		  }
		}	
		更好的方法
			Vuex 通过 store 选项，提供了一种机制将状态从根组件『注入』到每一个子组件中（需调用 Vue.use(Vuex)）
			子组件的computed计算属性中通过this.$store.state访问
	mapState 辅助函数
		为了解决，当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。
		import { mapState } from 'vuex'
		computed: mapState({
			// 箭头函数可使代码更简练
			count: state => state.count,

			// 传字符串参数 'count' 等同于 `state => state.count`
			countAlias: 'count',

			// 为了能够使用 `this` 获取局部状态，必须使用常规函数
			countPlusLocalState (state) {
			  return state.count + this.localCount
			}
		})
		当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。
		computed: mapState([
		  // 映射 this.count 为 store.state.count
		  'count'
		])
	对象展开运算符
		mapState 函数返回的是一个对象。
	组件仍然保有局部状态
		如果有些状态严格属于单个组件，最好还是作为组件的局部状态。
Getters
	有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数
	computed: {
	  doneTodosCount () {
		return this.$store.state.todos.filter(todo => todo.done).length
	  }
	}
	如果有多个组件需要用到此属性，可以使用getters。
	const store = new Vuex.Store({
	  state: {
		todos: [
		  { id: 1, text: '...', done: true },
		  { id: 2, text: '...', done: false }
		]
	  },
	  getters: {
		doneTodos: state => {
		  return state.todos.filter(todo => todo.done)
		}
	  }
	})
	//使用 store.getters 对象
	mapGetters 辅助函数
		mapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性
		import { mapGetters } from 'vuex'

		export default {
		  // ...
		  computed: {
		  // 使用对象展开运算符将 getters 混入 computed 对象中
			...mapGetters([
			  'doneTodosCount',
			  'anotherGetter',
			  // ...
			])
		  }
		}
Mutations
	更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。
	const store = new Vuex.Store({
	  state: {
		count: 1
	  },
	  mutations: {
		increment (state) {
		  // 变更状态
		  state.count++
		}
	  }
	})
		//触发
		store.commit('increment')
	提交载荷（Payload）
		你可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）
		mutations: {
		  increment (state, n) {
			state.count += n
		  }
		}
		//触发
		store.commit('increment', 10)
		在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读
	对象风格的提交方式
		//注册
		mutations: {
		  increment (state, payload) {
			state.count += payload.amount
		  }
		}
		//触发
		store.commit({
		  type: 'increment',
		  amount: 10
		})
	Mutations 需遵守 Vue 的响应规则	
		使用 Vue.set(obj, 'newProp', 123)
		以新对象替换老对象。state.obj = { ...state.obj, newProp: 123 }
	使用常量替代 Mutation 事件类型
	mutation 必须是同步函数
	在组件中提交 Mutations	
Actions
	Action 提交的是 mutation，而不是直接变更状态。
	Action 可以包含任意异步操作。
	const store = new Vuex.Store({
	  state: {
		count: 0
	  },
	  mutations: {
		increment (state) {
		  state.count++
		}
	  },
	  actions: {
		increment (context) {
		  context.commit('increment')
		}
	  }
	})
	分发 Action
		Action 通过 store.dispatch 方法触发
		store.dispatch('increment')
	在组件中分发 Action
		你在组件中使用 this.$store.dispatch('xxx') 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用
	组合 Actions
Modules
	Vuex 允许我们将 store 分割成模块（module）。
	
	在命名空间模块内访问全局内容（Global Assets）
	
	带命名空间的绑定函数
严格模式
	在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。
	const store = new Vuex.Store({
	  // ...
	  strict: true
	})
	开发环境与发布环境
	不要在发布环境下启用严格模式！严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。
	const store = new Vuex.Store({
	  // ...
	  strict: process.env.NODE_ENV !== 'production'
	})
表单处理
	双向绑定的计算属性
API参考
	Vuex.Store
		import Vuex from 'vuex'	
		const store = new Vuex.Store({ ...options })
	Vuex.Store构造器选项
		state --- Vuex store 实例的根 state 对象。
		mutations --- （同步）在 store 上注册 mutation，处理函数总是接受 state 作为第一个参数（如果定义在模块中，则为模块的局部状态），payload 作为第二个参数（可选）。
		actions --- （异步）在 store 上注册 action。处理函数接受一个 context 对象，包含以下属性
		getters --- 在 store 上注册 getter，getter 方法接受以下参数
		modules --- 包含了子模块的对象，会被合并到 store。
		plugins --- 一个数组，包含应用在 store 上的插件方法。
		strict --- 使 Vuex store 进入严格模式，在严格模式下，任何 mutation 处理函数以外修改 Vuex state 都会抛出错误。
	Vuex.Store 实例属性	
		state --- 根状态，只读。
		getters --- 暴露出注册的 getter，只读。
	Vuex.Store 实例方法
		commit(type: string, payload?: any) | commit(mutation: Object)
			提交 mutation。
		dispatch(type: string, payload?: any) | dispatch(action: Object)
			分发 action。返回 action 方法的返回值，如果多个处理函数被触发，那么返回一个 Pormise。
		replaceState(state: Object)
			替换 store 的根状态，仅用状态合并或 time-travel 调试。
		watch(getter: Function, cb: Function, options?: Object)
			响应式地监测一个 getter 方法的返回值，当值改变时调用回调函数。
		subscribe(handler: Function)
			注册监听 store 的 mutation。
			store.subscribe((mutation, state) => {
			  console.log(mutation.type)
			  console.log(mutation.payload)
			})
		registerModule(path: string | Array<string>, module: Module)
			注册一个动态模块。
		unregisterModule(path: string | Array<string>)
			卸载一个动态模块。
		hotUpdate(newOptions: Object)
			热替换新的 action 和 mutation。
	组件绑定的辅助函数
		mapState(map: Array<string> | Object): Object
			创建组件的计算属性返回 Vuex store 中的状态。
		mapGetters(map: Array<string> | Object): Object
			创建组件的计算属性返回 getter 的返回值。
		mapActions(map: Array<string> | Object): Object
			创建组件方法分发 action。
		mapMutations(map: Array<string> | Object): Object
			创建组件方法提交 mutation。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	







//定义在原型对象
1.Promise.prototype.then()
2.Promise.prototype.catch()

3.Promise.all()  //all 的主要用途就是多个请求，同时成功了，再做某事。(应用场景：多个请求都成功是，再做某事)
4.Promise.race()   //哪个先完成，就返回哪个的数据。(应用场景：两个服务器，比较哪个快。)
5.Promise.resolve()   //有时需要将现有对象转为Promise对象
6.Promise.reject()   //Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。
7.done()   //我们可以提供一个done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。
//asyncFunc().then(f1).catch(r1).then(f2).done(); 
8.finally()   //它与done方法的最大区别，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。
9.Promise.try()    //函数f是同步函数还是异步操作，但是想用 Promise 来处理它。
//Promise.try(func()).then(...).catch(...);
var getJson = function (url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest ()
    xhr.open('get',url)
    xhr.onreadystatechange = callback
    xhr.responseType = 'json'
    xhr.send(null)
    function callback () {
      if(this.readyState !== 4) return
      if(this.status === 200) {
        resolve(this.response)
      }else{
        reject(new Error(this.statusText))
      }
    }
  })
}
//后面请求在前一个请求成功才接收响应
getJson('api/list').then((response)=>{
    console.log(response)
    return getJson(response.url);  //返回了一个新的Promise实例，那么这个promise实例将作为新的then的调用者
}).then((response)=>{
    console.log(response)
}).catch(function(error){
	console.error('出错了：' + error);
});
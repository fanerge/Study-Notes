很早以前就看到了这个教程，但一直没有时间去学习，利用这个5.1把这个教程好好学一遍，也体验一下做全栈工程师的快感。
一.前端开发的历史和趋势
	什么是前端
	前后端不分的时代
	后端MVC的开发模式
		Model(模型层)：提供/保存数据
		Controller(控制层)：数据处理，实现业务逻辑
		View(视图层)：展示数据，提供用户界面
	前端工程师的角色 -- 模板工程师
	Ajax
	Web2.0

	前端MVC框架
		2010年Backbone.js
		前端Controller  （不应该处理业务逻辑，只需要处理UI逻辑）
		Router （通过URL切换视图）www.xyz.com/#books   M -- R --V
	MVVM模式
		Model: 提供/保存数据（保存数据）
		View-Model: 简化Controller，唯一的作用是为view层提供处理好的数据，不含有其它逻辑（处理数据）
		view: 展示数据，提供用户界面（展示数据）
	SPA
	Angular(MVVM) -- 核心为：双向绑定
	Vue(MVVM) -- 响应式编程
	JSX
	Rest接口
	Node = javascript + 操作系统API
二.React技术栈
	React的优点	
	JSX语法
	JSX语法解释
	Babel转码器
	组件的参数  --this.props
	组件的状态  --this.state	
	组件的生命周期
		componentWillMount() -- 组件加载前调用
		componentDidMount()  -- 组件加载后调用	
		componentWillUpdate()  -- 组件更新前调用
		componentDidUpdate()  -- 组件更新后调用
		componentWillUnmount()  -- 组件卸载前调用
		componentWillReceiveProps()  -- 组件接受新的参数时调用
		分为实例化 -- 存在期 -- 销毁期
		实例化：
			getDefaultProps()
			getInitialState()
			componentWillMount()
			render()
			componentDidMount()
		存在期：
			componentWillReceiveProps()
			shouldComponentUpdate()
			componentWillUpdate()
			render()
			componentDidUpdate()
		销毁期：
			componentWillUnmount()
	React组件库
		React-Bootstrap（UI库）：https://react-bootstrap.github.io/
		ReCharts（图表组件库）：http://recharts.org/	
	React的核心思想
		View是State的输出 -- view = f(state)
		f表示函数关系。只要 State 发生变化，View 也要随之变化。
		React本质将图形用户界面（GUI）函数化
	React没有解决的问题
		构架 与 通信
	架构问题
	通信问题
	状态的同步	
	Flux架构
		Action 》 Dispather 》 Store 》 View
	目前最流行的两个React架构
		MobX：响应式(Reactive)管理，state是可变对象，适合中小型项目
		Redux：函数式(Functional)管理，state是不可变对象，适合大型项目
	MobX架构 -- 观察这模式
		数据放Store中，Store的属性分成两种：被观察属性(@observer),自动计算得到的属性(@computed)
		Store是被观察者(observable)
		组件时观察者(observer)
	Redux架构
		所有的state存放在Store，组件每次重新渲染，都必须由状态变化引起。
		用户在UI上发出action。
		reducer函数接收action，然后根据当前的state计算出新的state。
	Redux将组件分为UI组件和容器组件
		//MyComponent为UI组件 App为容器组件
		const App = connect(mapStateToProps, mapDispatchToProps)(MyComponent);
		mapStateToProps：state与UI组件props的映射
		mapDispatchToProps：Action与UI组件的props的映射
	Reducer函数	
		其为纯函数，用来接收action，算出新的state
	Store有Redux的createStore方法生产，参数为reducer。
		为了把Store传入组件，必须使用Redux提供的Provider组件包裹整个应用。
		const store = createStore(reducer);
		ReactDOM.render(
			<Provider store={store}>
				<App />
			</Provider>, document.body
		);
三.Node应用开发
	Node简介
		Node式服务器的javascript运行环境，提供API与操作系统互动。
	npm  -- Node的模块管理器	
	Node开发脚本的好处	
	REST API -- 浏览器与服务器通信方式的设计风格。
	REST的核心概念
	URL设计 -- /store/1/employee/2
	查询字符串 -- GET /animals?zoo_id=1
	HTTP动词
		操作     CREATE\READ\UPDATE\DELETE
		AQL方法  INSERT\SELECT\UPDATE\DELETE
		HTTP动词 POST\GET\PUT(PATCH)\DELETE 
	Express	-- 搭建Web应用
		require('express');
		require('body-parser');
四.前端工程师简介
	持续集成流程
		本地开发（developing）
		静态代码检查（linting）
		单元测试（testing）
		合并进入主干（merging）
		自动构建（building）
		自动发布（publishing）
	持续集成的概念
		Continuous integration（简称 CI）
	ESLint(静态代码检查工具)
		Airbnb 公司的规则 
		npm install eslint --save-dev
		npm install eslint-plugin-import eslint-config-airbnb-base --save-dev
		进行静态检查命令 -- npm run lint
		修改错误 -- npm run lint-fix
	Mocha(单元测试)
		npm install -D mocha
		npm install -D chai
	Nightmare(功能测试)
		功能测试指的是，站在外部用户的角度，测试软件的某项功能。
		使用 Electron 模拟真实浏览器环境
		提供大量人性化、易用的 API
	移动平台的自动化测试  -- Appium
	Appium测试流程	
	持续集成服务平台	
		PaaS 平台 -- Travis CI


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



公司准备使用React了，非常开心，赶紧抓紧时间学习。
1.配置环境（有点麻烦）

2.知识点
2.1AppRegistry.registerComponent --- 注册为整个应用的根容器	
2.2Props（属性）-- 在生明周期中不可改变
	//声明一个组件
	class Greeting extends Component {
	  render() {
		return (
		  <Text>Hello {this.props.name}!</Text>
		);
	  }
	}
	//使用组件
	<Greeting name='Jaina' />
2.3State（状态）-- 在生命周期中可以改变
	//设置默认值
	constructor(props){
		super(props);
		this.state = { show: true };
	}
	//改变状态
	this.setState({ show: !this.state.show });
2.4样式
	使用驼峰命名法 -- backgroundColor
	StyleSheet.create -- 集中定义样式
	如：
		<Text style={styles.red}>just red</Text>
		const styles = StyleSheet.create({
		  red: {
			color: 'red',
		  },
		});
2.5高度和宽度
	style = {{ width: 100, height: 100 }}  //不同屏幕上显示的尺寸一样
	弹性（Flex）宽高 -- flex: num,	
2.6使用Flexbox布局		
	容器：
		flexDirection
		justifyContent
		alignItems
2.7处理文本输入
	TextInput 组件
		onChangeText -- 文本改变调用
		onSubmitEditing -- 文本提交调用（软键盘中的提交）
2.8轮播组件
	ScrollView -- 滚动容器
		horizontal
2.9列表组件
	ListView
		dataSource -- 列表的数据源
		renderRow -- 逐个解析数据源中的数据，然后返回一个设定好格式的组件来渲染。
		rowHasChanged -- 数据操作
2.10网络
	get或post请求、提交数据
	获取静态资源
	使用Fetch
		fetch('url', {             //服务器地址
			method: 'post',        //请求方式
			headers: {             //请求头部
				'Accept': 'application/json',
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({ //请求主体 
				firstParam: 'Value1',
				secondParam: 'Value2'
			})
		});
	//处理服务器的响应数据
	//Promise异步方案
	getMoviesFromApiAsync(){
		return fetch('url')
			.then((res) => res.json())
			.then((resJson) => { 
				return resJson.movies; 
			})
			.catch((err) => console.error(err));
	}	
	//ES7 async/await方案
	async getMoviesFromApi(){
		try{
			let res = await fetch('url');
			let resJson = await res.json();
			return resJson.movies;
		}catch( err ){
			console.error(err);
		}
	}
	WebSocket支持
	let ws = new WebSocket('url');
	//打开一个连接
	ws.open = () => {    
		ws.send('something');  //发送一个数据
	};
	//接收到数据
	ws.onmessage = ( e ) => { 
		console.log( e.data );
	};
	//监听错误
	ws.onerror = ( e ) => { ... };
	//连接被关闭
	ws.onclose = ( e ) => { ... };
3核心概念
3.1嵌入到现有的原生应用
3.2颜色
	#fof         --  #rgb  
	#fofc        --  #rgba
	#ff00ff      --  #rrggbb
	#ff00ff00    --  #rrggbbaa
	rgb(r,g,b)、rgba(r,g,b,a)
	hsl(360,100%,100%)、hsla(360,100%,100%,1.0)
	transparent、red、0xff00ff00(0xrrggbbaa)
3.3图片
	<Image source={require('./img/my-icon.png')} />
	img文件和组件在同以及目录
	若有my-icon.ios.png和my-icon.android.png文件，则packager自动选择平台打包。
	若有check@2x.png和check@3x.png会根据不同屏幕精度来提供图片。
	加载静态非图片资源 -- require(path) 常用的有.mp3, .wav, .mp4, .mov, .htm , .pdf
	网络图片 -- ios限制https协议，必须指定尺寸 
		<Image source={{uri: 'https://ysq00.com/logo.png'}}
				styles={{width: 400, height: 500}}
		/>
	本地文件系统的图片 -- 相册（CameraRoll）
	通过嵌套是实现背景图片 
		<Image source={...}>
			<Text> Inside </Text>
		</Image>
3.4处理触摸事件
	可点击的组件、属性 -- onPress
		使用：以Touchable开头的一系列组件
		TouchableHighlight -- 此组件的背景会在用户手指按下时变暗。
		TouchableNativeFeedBack -- 用户手指按下时形成类似墨水涟漪的视觉效果（android）。
		TouchableOpacity -- 用户手指按下时降低按钮的透明度。
		TouchableWithoutFeedback -- 无任何视觉反馈。
	长按的组件、属性 -- onLongPress
		ScrollView（pagingEnabled）
		ViewPagerAndroid(android)
		ListView、UITableView(ios)
	双指缩放、属性 -- maximunZoomScale、minimunZoomScale
	处理其他的手势	
		参阅PanResponder API或是手势识别系统的文档。
3.5动画
	用于全局的布局动画LayoutAnimation，和用于创建更精细的交互控制的动画Animated。	
	Animated
		使用start、stop方法来控制动画按顺序执行。
		内部支持动画的组件：View、Text、Image、ScrollView。
		Animated.createAnimatedComponent()来封装你自己的组件。
	配置动画
		Animated.timing(
		  this.state.xPosition,  //改变的属性
		  {
			toValue: 100,
			easing: Easing.back,
			duration: 2000,
		  }                              
		).start();
	组合动画
		多个动画可以通过parallel（同时执行）、sequence（顺序执行）、stagger和delay来组合使用。
	联动多个动画值
	插值（Interpolation）
		//它可以接受一个输入区间，然后将其映射到另一个的输出区间。
		value.interpolate({
		  inputRange: [0, 1],
		  outputRange: [0, 100],
		});	
	输入事件
		onScroll = {Animated.event([{nativeEvent: {contentOffset: {x: scrollX}}}])}
	响应当前的动画值
		spring.stopAnimation(callback) -- 会停止动画并且把最终的值作为参数传递给回调函数
		spring.addListener(callback) -- 会在动画的执行过程中持续异步调用回调函数
	使用本地引擎
		Animated.timing(this.state.animatedValue, {
			toValue: 1,
			duration: 500,
			useNativeDriver: true   //加上这行
		});
	LayoutAnimation
3.6无障碍功能（accessibility）
	读屏软件：ios -- VoiceOver 、android -- TalkBack	
	无障碍功能属性：accessible={true}
	无障碍标签accessibilityLabel (iOS, Android)
		accessibilityLabel={'Tap me!'}
	无障碍元素特性accessibilityTraits (iOS)
	无障碍元素的点击事件onAccessibilityTap (iOS)
	MagicTap双指双击事件onMagicTap (iOS)
	无障碍组件类型accessibilityComponentType (Android)
	无障碍功能优先级importantForAccessibility (Android)
	发送无障碍功能的相关事件 (Android)
3.7定时器
	setTimeout\clearTimeout
	setInterval\clearInterval
	setImmediate\clearImmediate -- 当前JavaScript执行快结束的时候执行
	requestAnimationFrame\cancelAnimationFrame -- 每帧刷新一次
	InteractionManager
		InteractionManager.runAfterInteractions(() => {  //在稍后执行代码，不会延迟当前进行的动画。
		   // ...需要长时间同步执行的任务...
		});
	TimerMixin
		应用闪退 -- 由于组件unmount后，计时器没有被清除。
		ES5处理方法
			npm i react-timer-mixin --save
			this.setTimeout(fn, timer);
		ES6处理方法
			componentWillUnmount() {
				this.timer && clearTimeout(this.timer);
			}
3.8直接操作
	setNativeProps -- 直接操作DOM节点的方法
	复合组件与setNativeProps
	将setNativeProps传递给子组件
	shouldComponentUpdate 和 setState -- 避免重新渲染那些实际没有变化的子组件所带来的额外开销
3.9调试
	访问App内的开发者菜单
		Android模拟器对应的则是Command? + M（windows上可能是F1或者F2）
		iOS模拟器中运行，还可以按下Command? + D 快捷键
	刷新Javascript
		在开发菜单中点击"Reload"选项
		Android模拟器上对应的则是按两下R
		iOS模拟器中按下Command? + R
	自动刷新
		开发菜单中的"Enable Live Reload"可以开启自动刷新
	应用内的错误与警告提示
		红屏错误 -- console.error()
		黄屏警告 -- console.warn()
			console.disableYellowBox = true;  //关闭黄屏警告
			YellowBox.ignoreWarnings(['Warning: ']); //忽略部分黄屏警告
	访问控制台日志
		react-native log-ios
		react-native log-android
		android -- adb logcat *:S ReactNative:V ReactNativeJS:V
		ios模拟器 -- Debug → Open System Log...
	chrome开发者工具
		开发者菜单中选择"Debug JS Remotely"选项
		Chrome的菜单中选择Tools → Developer Tools可以打开开发者工具
	React Developer Tools
		npm install -g react-devtools （基于electron）
		react-devtools
	使用Chrome开发者工具来在设备上调试
		android -- 将设备通过USB连接到电脑上后，可以使用adb命令行工具来设定从设备到电脑的端口转发：
			adb reverse tcp:8081 tcp:8081
		iOS真机 -- 需要打开 RCTWebSocketExecutor.m文件，然后将其中的"localhost"改为你的电脑的IP地址，最后启用开发者菜单中的"Debug JS Remotely"选项。
	使用自定义的JavaScript调试器来调试
	在Android上使用Stetho来调试
3.10自动化测试
	Running Tests and Contributing	
	JavaScript Tests
		Jest
			cd react-native
			npm test
		Flow
			cd react-native
			npm run flow
	Android		
		Unit Tests
			cd react-native
			./scripts/run-android-local-unit-tests.sh
		Integration Tests
			cd react-native
			./scripts/run-android-emulator.sh	
			cd react-native
			./scripts/run-android-local-integration-tests.sh
	ios
		Integration Tests
		Screenshot/Snapshot Tests
		End-to-end tests
3.11Javascript环境
	JavaScript语法转换器 -- Babel
	接口兼容（Polyfills）
3.12导航器对比
	React Navigation
		npm install --save react-navigation
	NavigatorIOS
		基于 UINavigationController封装的
3.13性能
	请先调出你应用的开发菜单，打开Show FPS Monitor
	性能问题的常见原因
		console.log语句
		发布时屏蔽所有的log
			if (!__DEV__) {
			  global.console = {
				info: () => {},
				log: () => {},
				warn: () => {},
				debug: () => {},
				error: () => {},
			  };
			}
	插件移除log
		npm install babel-plugin-transform-remove-console --save
	开发模式 (dev=true)
	ListView的属性
		initialListSize
		pageSize  
		scrollRenderAheadDistance -- 指定一个超过视野范围之外所需要渲染的行数。
		removeClippedSubviews -- 设置为true的时候，超出屏幕的子视图（同时overflow值为hidden）会从它们原生的父视图中移除。
3.14升级
	基于Git的自动合并更新
		1.安装Git
		2.安装react-native-gitupgrade工具模块
			npm install -g react-native-git-upgrade
		3.运行更新命令
			react-native-git-upgrade
			react-native-git-upgrade X.Y.Z
		4.解决冲突
	老式升级方案
		1.更新react-native的node依赖包
			npm info react-native
		2.升级项目模板文件
			eact-native upgrade	
3.15特定平台代码
	/common/components/   --  两平台都可以使用的组建   
	/android/components/  --  android使用的组建   
	/ios/components/      --  ios使用的组建
	特定平台扩展名
		BigButton.ios.js
		BigButton.android.js
		//对不同平台操作
		Platform.select({
			ios: { ... }
		})
	平台模块
		Platform.OS  返回当前平台类型（ios、android）
		对于android还可以检测版本
			Platform.Version
3.16手势响应系统
	ResponderEventPlugin.js
	TouchableHighlight与Touchable系列组件
	响应这的生命周期
		手刚触摸屏幕，询问是否愿意成为响应。
			View.props.onStartShouldSetResponder: (evt) => true
		在每一个触摸点开始移动（没有停下也没有离开屏幕）时再询问一次
			View.props.onMoveShouldSetResponder: (evt) => true
		View现在要开始响应触摸事件了，高亮。
			View.props.onResponderGrant: (evt) => {}
		响应者现在“另有其人”而且暂时不会“放权”，请另作安排。
			View.props.onResponderReject: (evt) => {}
		用户正在屏幕上移动手指时（没有停下也没有离开屏幕）。
			View.props.onResponderMove: (evt) => {}
		触摸操作结束时触发，比如"touchUp"（手指抬起离开屏幕）。
			View.props.onResponderRelease: (evt) => {}
		有其他组件请求接替响应者，当前的View是否“放权”？
			View.props.onResponderTerminationRequest: (evt) => true
		响应者权力已经交出。
			View.props.onResponderTerminate: (evt) => {}
	evt合成事件
		nativeEvent
			changedTouches -- 在上一次事件之后，所有发生变化的触摸事件的数组集合（即上一次事件后，所有移动过的触摸点）
			identifier --  触摸点的ID
			locationX -- 触摸点相对于父元素的横坐标	
			locationY -- 触摸点相对于父元素的纵坐标
			pageX -- 触摸点相对于根元素的横坐标
			pageY -- 触摸点相对于根元素的纵坐标
			target -- 触摸点所在的元素ID
			timestamp -- 触摸事件的时间戳，可用于移动速度的计算
			touches -- 当前屏幕上的所有触摸点的集合
	捕获ShouldSet事件处理
		冒泡
			onStartShouldSetResponder
			onMoveShouldSetResponder
		设置捕获期触发
			View.props.onStartShouldSetResponderCapture: (evt) => true,
			View.props.onMoveShouldSetResponderCapture: (evt) => true,	
	高级手势 -- PanResponder	
4社区资源
	4.1视频资源
	4.2第三方组件库
		https://js.coach/react-native
	4.3中文论坛
		http://bbs.reactnative.cn/
5使用指南（Android）
	5.1原生模块
		Toast -- Android中的一种会在屏幕下方弹出、保持一段时间的消息通知
		参数类型 -- @ReactMethod注明的方法
			Boolean -> Bool
			Integer -> Number
			Double -> Number
			Float -> Number
			String -> String
			Callback -> function
			ReadableMap -> Object
			ReadableArray -> Array	
		注册模块
			我们需要在应用的Package类的createNativeModules方法中添加这个模块。
		更多特性
			回调函数
			Promises	
			多线程
			发送事件到JavaScript
			从startActivityForResult中获取结果	
			监听生命周期事件
	5.2原生UI组件
	5.3Headless JS（后台任务）	
		JS端的API
	5.4在设备上运行
		前提条件：USB调试
			adb devices -- 查看设备
			react-native run-android -- 设备上安装App
			react-native run-android --variant=release    设备上安装发布版
		从设备上访问开发服务器
			(Android 5.0及以上)使用adb reverse命令
			adb reverse tcp:8081 tcp:8081
		(Android 5.0以下)通过Wi-Fi连接你的本地开发服务器
	5.5打包APK
		生成一个签名密钥
			用keytool命令生成一个私有密钥
			keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000
		设置gradle变量	
		添加签名到项目的gradle配置文件	
		生成发行APK包
			cd android && ./gradlew assembleRelease
		测试应用的发行版本
			cd android && ./gradlew installRelease
		启用Proguard代码混淆来缩小APK文件的大小（可选）
			def enableProguardInReleaseBuilds = true
	5.6调试Android UI性能
		标准的Android性能分析工具systrace
		使用Systrace进行性能分析
		收集一次数据
			<AndroidSDK所在目录>/platform-tools/systrace/systrace.py --time=10 -o trace.html sched gfx view -a <你的应用包名>
		查看性能数据
		启用垂直同步高亮
		找到你的进程
		UI 线程
		JS 线程
		原生模块线程	
		额外的：渲染线程
		寻找导致卡顿的罪魁祸首
		JS的问题
	5.7从源代码编译React Native
		
		
	














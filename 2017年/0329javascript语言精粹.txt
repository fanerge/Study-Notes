1.运算符优先级(从上往下降低，()可以改变优先级)
	. [] ()                    //属性存取及函数调用
	delete new typeof + - ！   //一元运算符
	* / %                      //乘法、除法、取模
	+ -                        //加法、减法
	>= <= > <                  //不定式运算符
	=== !==                    //等式运算符
	&&                         //逻辑与
	||                         //逻辑或
	？ ：                      //三元
2.typeof运算符
	number string boolean undefined function object（包括null和Array）symbol（七种） 
	基本类型：number string boolean null undefined symbol。
	引用类型（对象）：function array regexp object
一.对象
	1.对象字面量
		let Person = {
			name: 'fanerge',
			age: 12
		};
	2.检索
		Person['name'] //fanerge
		Person.name    //fanerge推荐
	3.更新
		Person.name = 'zhenfanyu';
	4.引用
		对象通过引用来传递，它们永远不会被拷贝。
	5.原型
		所有的字面量对象的原型为Object.prototype === undefined（这是最顶层的原型链）。
	6.反射
		typeof
		hasOwnProperty()   //实例方法
	7.枚举
		for in   //遍历自身 和 原型的可枚举属性
		Object.keys()、Object.values()、Object.entires()   //遍历自生可枚举属性
		Object.getOwnPropertyNames()  //遍历自生属性（包括不可枚举的属性）
		使用typeof 或 hasOwnProperty  过滤后在遍历
	8.删除
		delete Person.name
		Reflect.deleteProperty(obj, name)   //ES7
	9.减少全局变量污染
		namespace
二.函数
	1.函数对象
		函数对象的原型===Function.prototype再连接到Object.prototype。
	2.函数字面量
		var dd = function(){};
	3.调用
		方法调用模式（对象上的方法）---- this指向该对象
		函数调用模式 ---- this指向window,使用taht、self保存原this
		构造器调用模式（new）---- this指向实例对象
		Apply调用模式 ---- 第一个参数为被绑定给this的值，第二个为参数数组。		
	4.参数
		arguments
	5.返回
		return
	6.异常
		throw
		try{  }catch(e){  }
	7.给类型添加方法
		String.prototype.trim = function(){ this.replace(/^\s+|\s+$/g,'') };	
	8.递归（处理树形结构）
	9.作用域		
	10.闭包closure  IIFE
	11.	回调
	12.模块
		函数作用域 和 闭包来创建绑定对象与私有成员的关联。
		形式：一个定义了私有变量和函数（闭包）的函数。		
	13.级联（类似jq的链式调用）
		return this;//都返回该对象
	14.套用
		允许我们将函数与传递给它的参数相结合去产生一个新的函数。
	15.记忆（缓存一般用对象 和 数组）
		在内部缓存之前的计算结果，以后用到先读取缓存，否则再计算。
三.继承
	1.伪类
		var Mammal = function (name){
			this.name = name;
		};
		Mammal.prototype.getName = function(){
			return this.name;
		};
		
		var Cat = function (name){
			this.name = name;
			this.saying = 'dan';
		};
		Cat.prototype.sayDo = function(){
			return this.saying;
		};
		Cat.Prototype = new Mammal();
		
		var dd = new Cat('dd');
	2.对象说明符
		对于一个函数有多个参数时传入一个对象比较友好
			var myObject = maker({
				first: f,
				last: l,
				state: s,
				city: c
			});
	3.原型实现继承	
		var Parent = {
			name: 'fanerge',
			getName: function(){
				return this.name;
			}
		};	
		
		var Child = {
			name: '1111'
		};
		Object.setPrototypeOf(Child, Parent);	
	4.函数化实现继承
		var mammal = function (spec){
			var that = {};
			that.getName = function (){
				return spec.name;
			};
			that.says = function (){
				return spec.saying || '##';
			};
			return that;
		};
		//在cat种就可以用mammal种定义的方法了。
		var cat = function (spec){
			var that = mammal(spec); //先获得原来的两个方法
			that.getAge = function (){ //在添加特有的方法
				return spec.age;
			};
			return that;
		}; 
	5.部件
		我们可以构造一个能添加简单事件处理特性到任何对象上的函数。
		它会给对象添加一个on方法，一个fire方法和私有的事件注册表对象。
四.数组
	1.数组字面量
	2.长度 ---- length
	3.删除 ---- splice(index, number, adds)	
	4.枚举 ---- for\for...of 
	5.混淆的地方 ---- 何时使用数组 和 对象？	
	6.方法	
		Array.prototype >> Object.prototype >> null
	7.维度（二维数组）
五.正则表达式
	1.方法
		regexp.exec\regexp.test
		string.match\string.replace\string.search\string.split		
	2.修饰符
		i\g\m\y
	3.元素
		正则表达式选择 ---- /in|int/
		正则表达式序列 ---- 
		正则表达式因子 ---- 
		正则表达式转义 ---- \
		正则表达式分组 ---- 
			捕获型	     （）
			非捕获型     （?:前缀）
			向前正向匹配 （?=前缀）
			向前负向匹配 （?!前缀）
		正则表达式量词
			｛a, b｝
六.方法	
	Array	
		array1.concat(array2);	//返回新数组
		array1.join(separator); //返回字符串
		array1.pop(); //修改原数组 ，返回被删项
		array1.push(item); //修改原数组，返回长度
		array1.reverse(); //修改原数组，返回反转
		array1.shift(); //修改原数组 ，返回被删项
		array1.unshift(); //修改原数组，返回长度
		array1.slice(start, end); //返回新数组，负数则加上length
		array1.sort(); //修改原数组，排序
		array1.splice(start, deleteCount, item...); //修改原数组 ，返回被删项
	Function
		function.apply(thisArg, argArray)
	Number
		number.toExponential(fractionDigits); //参数为小数点的位数
		number.toFixed(fractionDigits); //参数为小数点的位数
		number.toPrecision(precision); //参数为控制有效数字的位数
		number.toString(radix); //将其转化为指定的进制数
	Object
		object.hasOwnProperty(name);
	RegExp
		regexp.exec(string);
		regexp.test(string)
	String
		string.charAt(pos);
		string.charCodeAt(pos);
		string.concat(string...);
		string.indexOf(searchString, position);
		string.lastIndexOf(searchString, position);
		string.localeCompare(that);
		string.match(regexp);
		string.replace(searchValue, replaceValue); //返回一个新的字符串
		string.search(regexp); 
		string.slice(start, end);
		string.substring(start, end);
		string.split(separator, limit); 
		string.toLocaleLowerCase();
		string.toLocaleUpperCase();
		string.toLowerCase();
		string.toUpperCase();
		String的静态方法
		String.fromCharCode(char...);

	
		
		
		
		
		
		
		
		
		
		












	
大多OO语言都支持两种继承方式： 接口继承和实现继承 ，而ECMAScript中无法实现接口继承，ECMAScript只支持实现继承，而且其实现继承主要是依靠原型链来实现。
定义一个父类。
function Animal(name){
	this.name = name || 'Animal';
	//实例方法
	this.sleep = function (){ 
		console.log(this.name + '正在睡觉！');
	}
}
//原型方法
Animal.prototype.eat = function (food){  
	console.log(this.name + '正在吃' + food);
};
1.原型链
	基本思想：将父类的实例作为子类的原型。
	function Cat(){ }
	Cat.prototype = new Animal();
	Cat.prototype.name = 'cat';
	测试代码：
		var cat = new Cat();
		console.log(cat.name); //cat
		console.log(cat.eat('fish')); //cat正在吃fish
		console.log(cat.sleep()); //cat正在睡觉！
		console.log(cat instanceof Animal); //true 
		console.log(cat instanceof Cat); //true
	特点：
		非常纯粹的继承关系，实例是子类的实例，也是父类的实例。
		父类新增原型方法/原型属性，子类都能访问到。
	缺点：
		要想为子类新增属性和方法，必须要在new Animal()这样的语句之后执行，不能放到构造器中。
		无法实现多继承。
		来自原型对象的引用属性是所有实例共享的。
		创建子类实例时，无法向父类构造函数传参。
2.构造继承
	基本思想：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）
	function Cat(name){
		Animal.call(this);
		this.name = name || 'Tom';
	}
	
	测试代码；
		var cat = new Cat();
		console.log(cat.name);  //Tom
		console.log(cat.sleep); //Tom正在睡觉！
		console.log(cat instanceof Animal); // false
		console.log(cat instanceof Cat); // true
	特点：
		解决了1中，子类实例共享父类引用属性的问题
		创建子类实例时，可以向父类传递参数
		可以实现多继承（call多个父类对象）
	缺点：
		实例并不是父类的实例，只是子类的实例
		只能继承父类的实例属性和方法，不能继承原型属性/方法
		无法实现函数复用，每个子类都有父类实例函数的副本，影响性能
3.实例继承
	基本思想；为父类实例添加新特性，作为子类实例返回
	function Cat(name){
		let instance = new Animal();
		instance.name = name || 'Tom';
		return instance;
	}
	测试代码：	
		var cat = new Cat();
		console.log(cat.name); //Tom
		console.log(cat.sleep()); //Tom正在睡觉！
		console.log(cat instanceof Animal); // true
		console.log(cat instanceof Cat); // false
	特点：
		不限制调用方式，不管是new 子类()还是子类(),返回的对象具有相同的效果。
	缺点：
		实例是父类的实例，不是子类的实例。
		不支持多继承。
4.拷贝继承
	function Cat(name){
		let animal = new Animal();
		for(let key in animal){
			Cat.prototype[key] = animal[key];
		}
		Cat.prototype.name = name || 'Tom';
	}
	测试代码：
		var cat = new Cat();
		console.log(cat.name); //Tom
		console.log(cat.sleep()); //Tom正在睡觉！
		console.log(cat instanceof Animal); // false
		console.log(cat instanceof Cat); // true
	特点：
		致辞多继承。
	缺点：
		效率较低，内存占用高（因为要拷贝父类的属性）
		无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）
5.组合继承（推荐）
	基本思想：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用
	function Cat(name){
		Animal.call(this);
		this.name = name || 'Tom';
	}
	Cat.prototype = new Animal();
	测试代码：
		var cat = new Cat();
		console.log(cat.name); //Tom
		console.log(cat.sleep()); //Tom正在睡觉！
		console.log(cat instanceof Animal); // true
		console.log(cat instanceof Cat); // true
	特点：
		弥补了方式2的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法
		既是子类的实例，也是父类的实例
		不存在引用属性共享问题
		可传参
		函数可复用
	缺点：
		调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）
6.寄生组合继承（推荐）
	基本思想：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点	
	function Cat(name){
		Animal.call(this);
		this.name = name || 'Tom';
	}
	(function(){
		// 创建一个没有实例方法的类
		var Super = function(){};
		Super.prototype = Animal.prototype;
		//将实例作为子类的原型
		Cat.prototype = new Super();
	})();
	特点：
		完美
	缺点：
		实现复杂





	
	
	
	
	
	
	
	
	
	
	
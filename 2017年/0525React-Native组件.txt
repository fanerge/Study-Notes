学习React-Native的自带组件库
1.ActivityIndicator
	效果：显示一个圆形的loading提示符号。
	Props：
		animating（bool）-- 是否要显示指示器，默认为true，表示显示。
		color（string）-- 滚轮的前景颜色（默认为灰色）。
		ios - hidesWhenStopped（bool）-- 在没有动画的时候，是否要隐藏指示器（默认为true）。
		size enum('small', 'large') -- 指示器的大小，small高为20，large高为36。
2.Button
	效果：一个简单的跨平台的按钮组件，可以进行一些简单的定制。
	可以使用TouchableOpacity或是TouchableNativeFeedback组件来制作自己所需要的按钮
	Props：
		accessibilityLabel（string）-- 用于给残障人士显示的文本（比如读屏器软件可能会读取这一内容）。
		color（color）-- 文本的颜色(iOS)，或是按钮的背景色(Android)
		disabled（bool）-- 设置为true时此按钮将不可点击
		onPress（function）-- 用户点击此按钮时所调用的处理函数
		title（string）-- 按钮内显示的文本
3.DatePickerIOS
	效果：使用DatePickerIOS来在iOS平台上渲染一个日期/时间选择器。
	Props：
		date（Date）-- 当前被选中的日期。
		maximumDate（Date）-- 可选的最大日期。
		minimumDate（Date）-- 可选的最小日期。
		minuteInterval enum(1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30) -- 可选的最小的分钟单位。
		mode enum('date', 'time', 'datetime') -- 选择器模式
		onDateChange（function）-- 当用户修改日期或时间时调用此回调函数，参数表示new的日期和时间。
		timeZoneOffsetInMinutes（number）-- 时区差，单位是分钟。
4.DrawerLayoutAndroid
	效果：抽屉导航。
	Props：	
		drawerLockMode enum('unlocked', 'locked-closed', 'locked-open') -- 设置抽屉的锁定模式。
			无论抽屉处于那种状态，都仍然可以调用openDrawer/closeDrawer这两个方法打开和关闭。
		drawerPosition enum(DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right) 
			指定抽屉可以从屏幕的哪一边滑入。
		drawerWidth （number）-- 指定抽屉的宽度，也就是从屏幕边缘拖进的视图的宽度。
		keyboardDismissMode enum('none', "on-drag") -- 指定在拖拽的过程中是否要隐藏软键盘。
		onDrawerClose（function）-- 每当导航视图（抽屉）被关闭之后调用此回调函数。
		onDrawerOpen（function）-- 每当导航视图（抽屉）被打开之后调用此回调函数。
		onDrawerSlide（function）-- 每当导航视图（抽屉）产生交互的时候调用此回调函数。
		onDrawerStateChanged（function）-- 每当抽屉的状态变化时调用此回调函数。
			idle（空闲），表示现在导航条上没有任何正在进行的交互。
			dragging（拖拽中），表示用户正在与导航条进行交互。
			settling（停靠中），表示用户刚刚结束与导航条的交互，导航条正在结束打开或者关闭的动画。
		renderNavigationView（function）-- 此方法用于渲染一个可以从屏幕一边拖入的导航视图。 
5.FlatList
	效果：高性能的简单列表组件。
		<FlatList
		  data={[{key: 'a'}, {key: 'b'}]}
		  renderItem={({item}) => <Text>{item.key}</Text>}
		/>
	Props：	
		ItemSeparatorComponent?: ?ReactClass<any>
			行与行之间的分隔线组件。不会出现在第一行之前和最后一行之后。
		ListHeaderComponent?: ?ReactClass<any>
			头部组件。	
		ListFooterComponent?: ?ReactClass<any>
			尾部组件。
		columnWrapperStyle?: StyleObj
			如果设置了多列布局（即将numColumns值设为大于1的整数），则可以额外指定此样式作用在每行容器上。
		data: ?Array<ItemT>
			data属性目前只支持普通数组。
		extraData?: any 	
			如果有除data以外的数据用在列表中（不论是用在renderItem还是Header或者Footer中），请在此属性中指定。同时此数据在修改时也需要先修改其引用地址（比如先复制到一个新的Object或者数组中），然后再修改其值，否则界面很可能不会刷新。
		getItem?:
		getItemCount?: 
		getItemLayout?: (data: ?Array<ItemT>, index: number) => {length: number, offset: number, index: number}
			getItemLayout是一个可选的优化，用于避免动态测量内容尺寸的开销，不过前提是你可以提前知道内容的高度。如果你的行高是固定的，getItemLayout用起来就既高效又简单，类似下面这样：
			getItemLayout={(data, index) => ( {length: 行高, offset: 行高 * index, index} )}
			注意如果你指定了SeparatorComponent，请把分隔线的尺寸也考虑到offset的计算之中。
		horizontal?: ?boolean
			设置为true则变为水平布局模式。
		initialNumToRender: number	
			指定一开始渲染的元素数量，最好刚刚够填满一个屏幕，这样保证了用最短的时间给用户呈现可见的内容。
		keyExtractor: (item: ItemT, index: number) => string	
			此函数用于为给定的item生成一个不重复的key。
		legacyImplementation?:  ?boolean	
			设置为true则使用旧的ListView的实现。
		numColumns: number	
			多列布局只能在非水平模式下使用，即必须是horizontal={false}。此时组件内元素会从左到右从上到下按Z字形排列，类似启用了flexWrap的布局
		onEndReached?: ?(info: {distanceFromEnd: number}) => void	
			当列表被滚动到距离内容最底部不足onEndReachedThreshold的距离时调用。	
		onEndReachedThreshold?: ?number	
			决定当距离内容最底部还有多远时触发onEndReached回调。注意此参数是一个比值而非像素单位。比如，0.5表示距离内容最底部的距离为当前列表可见长度的一半时触发。
		onRefresh?: ?() => void	
			如果设置了此选项，则会在列表头部添加一个标准的RefreshControl控件，以便实现“下拉刷新”的功能。同时你需要正确设置refreshing属性。
		onViewableItemsChanged?:  ?(info: {viewableItems: Array<ViewToken>, changed: Array<ViewToken>}) => void	
			在可见行元素变化时调用。可见范围和变化频率等参数的配置请设置viewabilityconfig属性
		refreshing?: ?boolean	
			在等待加载新数据时将此属性设为true，列表就会显示出一个正在加载的符号。
		renderItem: (info: {item: ItemT, index: number}) => ?React.Element<any>	
			根据行数据data渲染每一行的组件。	
		viewabilityConfig?: ViewabilityConfig	
	方法：
		scrollToEnd(params?: object)
			滚动到底部。如果不设置getItemLayout属性的话，可能会比较卡。
		scrollToIndex(params: object)	
			滚动到指定索引。
		scrollToItem(params: object)	
			滚动到指定项目。
		scrollToOffset(params: object)	
			滚动到指定的偏移。
		recordInteraction()	
6.Image
	效果：一个用于显示多种不同类型图片的React组件。
	在Android上支持GIF和WebP格式图片
	Props：
		onLayout（function）
			当元素挂载或者布局改变的时候调用，参数为：{nativeEvent: {layout: {x, y, width, height}}}
		onLoad（function）	
			加载成功完成时调用此回调函数。
		onLoadEnd（function）	
			加载结束后，不论成功还是失败，调用此回调函数。
		onLoadStart（function）
			加载开始时调用。
		resizeMode 	enum('cover', 'contain', 'stretch', 'repeat', 'center') 
			决定当组件尺寸和图片尺寸不成比例的时候如何调整图片的大小。
		source {uri: string},number	
			uri是一个表示图片的资源标识的字符串，它可以是一个http地址或是一个本地文件路径（使用require(相对路径)来引用）。
			
		style style	
			Flex布局
			Shadow阴影
			Transforms动画变换
			backfaceVisibility ReactPropTypes.oneOf(['visible', 'hidden'])
			resizeMode Object.keys(ImageResizeMode)
			backgroundColor color
			borderBottomLeftRadius ReactPropTypes.number
			borderBottomRightRadius ReactPropTypes.number
			borderTopLeftRadius ReactPropTypes.number
			borderTopRightRadius ReactPropTypes.number
			borderColor color
			borderRadius number
			borderWidth number
			overflow enum('visible', 'hidden')
			tintColor color
				为所有非透明的像素指定一个颜色
			opacity number
			android overlayColor ReactPropTypes.string	
				当图片有圆角的时候，指定一个颜色用于填充圆角处的空白。
			testID string 
				一个唯一的资源标识符，用来在自动测试脚本中标识这个元素。
			android resizeMethod  enum('auto', 'resize', 'scale')
				当图片实际尺寸和容器样式尺寸不一致时，决定以怎样的策略来调整图片的尺寸。默认值为auto。
			ios accessibilityLabel string
				当用户与图片交互时，读屏器（无障碍功能）会朗读的文字。
			ios accessible bool
				当此属性为真的时候，表示这个图片是一个启用了无障碍功能的元素。
			ios blurRadius number
				blurRadius(模糊半径)：为图片添加一个指定半径的模糊滤镜。
			ios capInsets {top: number, left: number, bottom: number, right: number}
			ios defaultSource  {uri: string, width: number, height: number, scale: number}, number 
			ios onError (function)
				当加载错误的时候调用此回调函数，参数为{nativeEvent: {error}}
			ios onPartialLoad (function)
				如果图片本身支持逐步加载，则逐步加载的过程中会调用此方法。“逐步加载”的具体定义与具体的标准和实现有关。
			ios onProgress (function)
				在加载过程中不断调用，参数为{nativeEvent: {loaded, total}}
	方法：
		static getSize(uri: string, success: (width: number, height: number) => void, failure: (error: any) => void)
			在显示图片前获取图片的宽高(以像素为单位)。如果图片地址不正确或下载失败,此方法也会失败。
		static prefetch(url: string)	
			预加载一个远程图片(将其下载到本地磁盘缓存)。
7.KeyboardAvoidingView
	效果：手机上弹出的键盘常常会挡住当前的视图。本组件可以自动根据键盘的位置，调整自身的position或底部的padding，以避免被遮挡。
	Props：	
		behavior PropTypes.oneOf(['height', 'position', 'padding'])
		contentContainerStyle	
			如果设定behavior值为'position'，则会生成一个View作为内容容器。此属性用于指定此内容容器的样式。
		keyboardVerticalOffset  PropTypes.number.isRequired	
			有时候应用离屏幕顶部还有一些距离（比如状态栏等等），利用此属性来补偿修正这段距离。
	方法：
		relativeKeyboardHeight(keyboardFrame)
		onKeyboardChange(event)	
		onLayout(event)	
8.ListView
	效果：一个核心组件，用于高效地显示一个可以垂直滚动的变化的数据列表。
	Props：
		ScrollView props
			这意味着ListView可以使用所有ScrollView的属性。
		dataSource ListViewDataSource
			ListView.DataSource实例（列表依赖的数据源）
		initialListSize number
			指定在组件刚挂载的时候渲染多少行数据。
		onChangeVisibleRows（function）
			当可见的行的集合变化的时候调用此回调函数。
			(visibleRows, changedRows) => void
		onEndReached（function）
			当所有的数据都已经渲染过，并且列表被滚动到距离最底部不足onEndReachedThreshold个像素的距离时调用。
		onEndReachedThreshold number
			调用onEndReached之前的临界值，单位是像素。
		pageSize number
			每次事件循环（每帧）渲染的行数。
		removeClippedSubviews bool 
			用于提升大列表的滚动性能。需要给行容器添加样式overflow:'hidden'。
		renderHeader function
		renderFooter function
			如果它们重绘的性能开销很大，把他们包装到一个StaticContainer或者其它恰当的结构中。页脚会永远在列表的最底部，而页头会在最顶部。
		renderRow function
			(rowData, sectionID, rowID, highlightRow) => renderable
		renderScrollComponent function
			(props) => renderable
			指定一个函数，在其中返回一个可以滚动的组件。
		renderSectionHeader function
			(sectionData, sectionID) => renderable
			如果提供了此函数，会为每个小节(section)渲染一个粘性的标题。
			 stickySectionHeadersEnabled来决定是否启用其粘性特性。
		renderSeparator function 	
			(sectionID, rowID, adjacentRowHighlighted) => renderable	
			如果提供了此属性，一个可渲染的组件会被渲染在每一行下面，除了小节标题的前面的最后一行。
		scrollRenderAheadDistance number	
			当一个行接近屏幕范围多少像素之内的时候，就开始渲染这一行。	
			stickyHeaderIndices [number]
			一个子视图下标的数组，用于决定哪些成员会在滚动之后固定在屏幕顶端。	
		stickySectionHeadersEnabled?: bool	
			设置小节标题(section header)是否具有粘性。
	方法：
		getMetrics() 
			导出一些用于性能分析的数据。	
		scrollTo(...args)	
			滚动到指定的x, y偏移处，可以指定是否加上过渡动画。
		scrollToEnd(options?)	
			滚动到视图底部（水平方向的视图则滚动到最右边）。
9.ListView.DataSource	
	效果：ListViewDataSource为ListView组件提供高性能的数据处理和访问。		
		要更新datasource中的数据，请（每次都重新）调用cloneWithRows方法（如果用到了section，则对应cloneWithRowsAndSections方法）。		
	方法：
		constructor(params)
			你可以在构造函数中针对section标题和行数据提供自定义的提取方法和hasChanged比对方法。
			若不提供，则会使用默认的defaultGetRowData和defaultGetSectionHeaderData方法来提取行数据和section标题。
		cloneWithRows(dataBlob, rowIdentities)	
			根据指定的dataBlob和 rowIdentities为ListViewDataSource复制填充数据
		cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities)	
			此方法作用基本等同cloneWithRows，区别在于可以额外指定sectionIdentities 。如果你不需要section，则直接使用cloneWithRows即可。
		getRowCount()
		getRowAndSectionCount()	
		rowShouldUpdate(sectionIndex, rowIndex)	
			返回值表明某行数据是否已变更，需要重新渲染。
		getRowData(sectionIndex, rowIndex)	
			返回渲染行所需的数据（指定如何从原始dataBlob中提取数据）。
		getRowIDForFlatIndex(index) 	
			给定索引值，求其对应rowID。如果查找不到则返回null。
		getSectionIDForFlatIndex(index)	
			给定索引值，求其对应sectionID。如果查找不到则返回null。
		getSectionLengths() 	
			返回一个数组，包含每个section的行数量。
		sectionHeaderShouldUpdate(sectionIndex)	
			返回值用于说明section标题是否需要重新渲染。
		getSectionHeaderData(sectionIndex)	
			获取section标题数据。	
10.Modal
	效果：Modal组件可以用来覆盖包含React Native根视图的原生视图（如UIViewController，Activity）。	
	Props：
		animationType PropTypes.oneOf(['none', 'slide', 'fade'])
		onRequestClose Platform.OS === 'android' ?
			PropTypes.func.isRequired : PropTypes.func
		onShow function
		transparent bool
		visible bool
		ios onOrientationChange PropTypes.func
		ios supportedOrientations 
			PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])) 
11.NavigatorIOS
	效果：UINavigationController的包装器，可实现导航。
		initialRoute -- 默认路由
	处理导航
	导航栏的配置	
	Props：
		barTintColor string
			导航条的背景颜色。
		initialRoute
		itemWrapperStyle
			导航器中的组件的默认属性。一个常见的用途是设置所有页面的背景颜色。
		navigationBarHidden bool 
			一个布尔值，决定导航栏是否隐藏。
		shadowHidden bool	
			一个布尔值，决定是否要隐藏1像素的阴影
		tintColor string	
			导航栏上按钮的颜色。
		titleTextColor string	
			导航器标题的文字颜色。
		translucent bool	
			一个布尔值，决定是否导航条是半透明的。
		interactivePopGestureEnabled bool 	
			决定是否启用滑动返回手势。	
	方法：
		push()
			向前的new route
		popN(n: number)	
			返回到第几个route	
		pop()
			返回前一个页面
		replaceAtIndex()	
			替换指定索引的route
		replace()
			替换当前页面的route
		replacePrevious()
			替换之前的route
		popToTop()
			返回顶部路由
		popToRoute()
			回到特定路由
		replacePreviousAndPop()	
			替换以前的route
		resetTo()	
12.Picker
	效果：本组件可以在iOS和Android上渲染原生的选择器（Picker）。
	Props：		
		onValueChange function
			itemValue: 被选中项的value属性
			tion: 被选中项在picker中的索引位置
			某一项被选中时执行此回调。调用时带有如下参数。
		selectedValue any
			默认选中的值。可以是字符串或整数。
		style pickerStyleType
		testID string	
			用于在端对端测试中定位此视图。
		android enabled bool
			如果设为false，则会禁用此选择器。
		android mode enum('dialog', 'dropdown')	
			以指定在用户点击选择器时，以怎样的形式呈现选项：
			dialog（对话框形式）: 显示一个模态对话框。默认选项。
			dropdown（下拉框形式）: 以选择器所在位置为锚点展开一个下拉框。
		android prompt string
			设置选择器的提示字符串。在Android的对话框模式中用作对话框的标题。
		ios itemStyle  itemStylePropType
			指定应用在每项标签上的样式。
13.PickerIOS
	效果：	
	Props：
		itemStyle itemStylePropType 
		onValueChange function
		selectedValue any
14.ProgressBarAndroid
	效果：这个组件可以用来表示应用正在加载或者有些事情正在进行中。	
	Props：	
		color string 
			进度条的颜色。
		indeterminate indeterminateType
			决定进度条是否要显示一个不确定的进度。注意这个在styleAttr是Horizontal的时候必须是false。
		progress number	
			当前的进度值（在0到1之间）。
		styleAttr STYLE_ATTRIBUTES	
			进度条的样式。可取值有：
			Horizontal
			Small
			Large
			Inverse
			SmallInverse
			LargeInverse
		testID string	
			用来在端到端测试中定位这个视图。
15.ProgressViewIOS
	效果：使用ProgressViewIOS来在iOS上渲染一个UIProgressView。		
	Props：		
		progress number	
			当前的进度值（0到1之间）。
		progressImage Image.propTypes.source	
			一个可以拉伸的图片，用于显示进度条。
		progressTintColor string	
			进度条本身染上的颜色。	
		progressViewStyle enum('default', 'bar')	
			进度条的样式。
		trackImage Image.propTypes.source	
			一个可拉伸的图片，用于显示进度条后面的轨道。
		trackTintColor string	
			进度条轨道染上的颜色。
16.RefreshControl
	效果：这一组件可以用在ScrollView或ListView内部，为其添加下拉刷新的功能。		
	Prop：
		onRefresh function
			在视图开始刷新时调用。
		refreshing bool	
			视图是否应该在刷新时显示指示器。	
		android colors [ColorPropType] 	
			指定至少一种颜色用来绘制刷新指示器。	
		android enabled bool	
			指定是否要开启刷新指示器。
		android progressBackgroundColor ColorPropType
			指定刷新指示器的背景色。
		android size RefreshLayoutConsts.SIZE.DEFAULT	
			指定刷新指示器的大小，具体数值可参阅RefreshControl.SIZE.
		android progressViewOffset React.PropTypes.number
			指定刷新指示器的垂直起始位置(top offset)
		ios tintColor ColorPropType
			指定刷新指示器的颜色。
		ios title string
			指定刷新指示器下显示的文字。
17.ScrollView
	区别：
		ScrollView -- 数据特别少
		ListView   -- 数据比较多
		FlatList   -- 代替前者
	Props：
		contentContainerStyle StyleSheetPropType(ViewStylePropTypes) 
			这些样式会应用到一个内层的内容容器上，所有的子视图都会包裹在内容容器内。
		horizontal bool
			是否水平排列。	
		keyboardDismissMode enum('none', "interactive", 'on-drag')
			用户拖拽滚动视图的时候，是否要隐藏软键盘。
		keyboardShouldPersistTaps enum('always', 'never', 'handled', false, true)	
			如果当前界面有软键盘，那么点击scrollview后是否收起键盘，取决于本属性的设置。
		onContentSizeChange function
			此函数会在ScrollView内部可滚动内容的视图发生变化时调用。
		onScroll function 
			在滚动的过程中，每帧最多调用一次此回调函数。
		refreshControl element
			指定RefreshControl组件，用于为ScrollView提供下拉刷新功能。
		removeClippedSubviews bool
			屏幕之外的子视图（子视图的overflow样式需要设为hidden）会被移除。
		showsHorizontalScrollIndicator bool
			当此属性为true的时候，显示一个水平方向的滚动条。
		showsVerticalScrollIndicator bool	
			当此属性为true的时候，显示一个垂直方向的滚动条。	
		style	
			样式
		android endFillColor color	
			处理有时候滚动视图会占据比实际内容更多的空间。	
		android overScrollMode enum('auto', 'always', 'never')	
			覆盖默认的overScroll模式
		android scrollPerfTag  string		
			用于滚动性能日志。
		ios alwaysBounceHorizontal bool	
			水平方向即使内容比滚动视图本身还要小，也可以弹性地拉动一截。
		ios alwaysBounceVertical bool	
			垂直方向即使内容比滚动视图本身还要小，也可以弹性地拉动一截。
		ios automaticallyAdjustContentInsets bool 	
			当滚动视图放在一个导航条或者工具条后面的时候，iOS系统是否要自动调整内容的范围。
		ios bounces bool	
			如果内容范围比滚动视图本身大，在到达内容末尾的时候，可以弹性地拉动一截。
		ios bouncesZoom bool	
			使用手势缩放内容可以超过min/max的限制，然后在手指抬起之后弹回min/max的缩放比例。
		ios canCancelContentTouches bool	
			一旦有子节点响应触摸操作，即使手指开始移动也不会拖动滚动视图。
		ios centerContent bool	
			如果滚动视图的内容比视图本身小，则会自动把内容居中放置。
		ios contentInset {top: number, left: number, bottom: number, right: number}	
			内容范围相对滚动视图边缘的坐标。默认为{0, 0, 0, 0}。
		ios contentOffset PointPropType	
			用来手动设置初始的滚动坐标。默认值为{x: 0, y: 0}。
		ios decelerationRate number	
			一个浮点数，用于决定当用户抬起手指之后，滚动视图减速停下的速度。
		ios directionalLockEnabled bool 	
			滚动视图在拖拽的时候会锁定只有垂直或水平方向可以滚动。
		ios indicatorStyle enum('default', 'black', 'white')	
			设置滚动条的样式。
		ios maximumZoomScale number	
			允许的最大缩放比例。	
		ios minimumZoomScale number	
			允许的最小缩放比例。默认值为1.0。
		ios onScrollAnimationEnd function 	
			当滚动动画结束之后调用此回调。
		pagingEnabled bool	
			滚动条会停在滚动视图的尺寸的整数倍位置。	
		scrollEnabled bool
			当值为false的时候，内容不能滚动。
		ios scrollEventThrottle number
			这个属性控制在滚动过程中，scroll事件被调用的频率（单位是每秒事件数量）。
		ios scrollIndicatorInsets {top: number, left: number, bottom: number, right: number}
			决定滚动条距离视图边缘的坐标。这个值应该和contentInset一样。默认值为{0, 0, 0, 0}。
		ios scrollsToTop bool 
			点击状态栏的时候视图会滚动到顶部。
		ios snapToAlignment enum('start', "center", 'end')
			当设置了snapToInterval，snapToAlignment会定义停驻点与滚动视图之间的关系。
		ios snapToInterval number 
			当设置了此属性时，会让滚动视图滚动停止后，停止在snapToInterval的倍数的位置。
		stickyHeaderIndices [number]
			一个子视图下标的数组，用于决定哪些成员会在滚动之后固定在屏幕顶端。
		ios zoomScale number 
			滚动视图内容初始的缩放比例。默认值为1.0。
	方法：
		scrollTo(y: number | { x?: number, y?: number, animated?: boolean }, x: number, animated: boolean) 
			滚动到指定的x, y偏移处。第三个参数为是否启用平滑滚动动画。
		scrollToEnd(options?)	
			滚动到视图底部（水平方向的视图则滚动到最右边）。
18.Navigator			
	效果：使用导航器可以让你在应用的不同场景（页面）间进行切换。
	导航方法：
		getCurrentRoutes() -- 获取当前栈里的路由，也就是push进来，没有pop掉的那些。
		jumpBack() -- 跳回之前的路由，当然前提是保留现在的，还可以再跳回来，会给你保留原样。
		jumpForward() -- 上一个方法不是调到之前的路由了么，用这个跳回来就好了。
		jumpTo(route) -- 上一个方法不是调到之前的路由了么，用这个跳回来就好了。
		push(route) -- 跳转到新的场景，并且将场景入栈，你可以稍后跳转过去
		pop() -- 跳转回去并且卸载掉当前场景
		replace(route) -- 用一个新的路由替换掉当前场景 
		replaceAtIndex(route, index) -- 替换掉指定序列的路由场景
		replacePrevious(route) -- 替换掉之前的场景
		resetTo(route) -- 跳转到新的场景，并且重置整个路由栈
		immediatelyResetRouteStack(routeStack) -- 用新的路由数组来重置路由栈
		popToRoute(route) -- pop到路由指定的场景，在整个路由栈中，处于指定场景之后的场景将会被卸载。
		popToTop() -- pop到栈中的第一个场景，卸载掉所有的其他场景。
	Props:
		configureScene function
			可选的函数，用来配置场景动画和手势
		initialRoute object 
			定义启动时加载的路由。路由是导航栏用来识别渲染场景的一个对象。
		initialRouteStack [object]
			提供一个路由集合用来初始化。如果没有设置初始路由的话则必须设置该属性。
		navigationBar node
			可选参数，提供一个在场景切换的时候保持的导航栏。
		navigator object
			可选参数，提供从父导航器获得的导航器对象。
		onDidFocus function
			每当导航切换完成或初始化之后，调用此回调，参数为新场景的路由。
		onWillFocus function
			会在导航切换之前调用，参数为目标路由。
		renderScene function
			必要参数。用来渲染指定路由的场景。调用的参数是路由和导航器。
		sceneStyle View#style
			将会应用在每个场景的容器上的样式。
		
		
		
		
		
		
		
		
		
		
		
		
		
		


	
			
			
			
18.View
	效果：作为创建UI时最基础的组件。		
		View的设计初衷是和StyleSheet搭配使用。StyleSheet.create({});		
	Props:
		onLayout function	
			当组件挂载或者布局变化的时候调用 
			{nativeEvent: { layout: {x, y, width, height}}}
		onMoveShouldSetResponder function 	
		onMoveShouldSetResponderCapture function	
		onResponderGrant function	
			对于大部分的触摸处理，你只需要用TouchableHighlight或TouchableOpacity包装你的组件。	
		onResponderMove function	
		onResponderReject function	
		onResponderRelease function	
		onResponderTerminate function	
		onResponderTerminationRequest function	
		onStartShouldSetResponder function	
		onStartShouldSetResponderCapture function	
		pointerEvents enum('box-none', 'none', 'box-only', 'auto')	
			用于控制当前视图是否可以作为触控事件的目标。
				auto：视图可以作为触控事件的目标。
				none：视图不能作为触控事件的目标。
				box-none：视图自身不能作为触控事件的目标，但其子视图可以。
		removeClippedSubviews bool 	
			如果控件有很多不在屏幕内的子视图，会非常有用。
	style:
		flex
		shadowProp
		transforms
		backfaceVisibility enum('visible', 'hidden')
		bakgroundColor string
		borderColor string
			borderTopColor string
		borderRadius number
			borderTopLeftRadius number
		borderStyle enum('solid', 'dotted', 'dashed')
		borderWidth number
			borderTopWidth number
		opacity number
		overflow enum('visible', 'hidden')
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		


		
			
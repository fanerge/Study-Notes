介绍 --- FIS3 是面向前端的工程构建工具。
安装 --- npm install -g fis3
	升级 --- npm update -g fis3
起步
	构建 --- 由 fis3-command-release 插件提供构建能力
	命令
		fis3 release -d <path>    path为任意目录，构建发布到path目录下，可以为相对路径和绝对路径
		fis3 release -h           获取更多参数（帮助）
	资源定位 --- 构建后所有地址变为绝对地址		
		配置构建后所有的静态资源在static目录
			fis.match('*.{ png, js, css }',{ 
				release: '/static/$0'
			});
	配置文件 --- fis-conf.js
		fis.match( selector, props ) --- 设置规则的配置接口
			slector: 为匹配文件路径
			props: 编译规则属性，包括文件属性和插件属性
			如；fis.match('*.png', {  useHash: false});
		fis.media() --- 接口提供多种状态功能，区分开发环境和生产环境
			fis.media('prod').match('*.js', {
				optimizer: fis.plugin('uglify-js');
			});
			shell --- fis3 release <media>   如：fis3 release prod
	更多配置接口
		fis3 inspect --- 查看文件分配到的属性，这些属性决定了文件将如何被编译处理。
		fis3 inspect <media> --- 查看特定 media 的分配情况
	文件指纹 --- 唯一标识一个文件
		浏览器缓存
		//为js、css、png文件添加MD5戳
		fis.match('*.{js, css, png}',{
			useHash: true
		});
	压缩资源 --- 配置压缩器
		fis.match('*.js', {
		  // fis-optimizer-uglify-js 插件进行压缩，已内置
		  optimizer: fis.plugin('uglify-js')
		});

		fis.match('*.css', {
		  // fis-optimizer-clean-css 插件进行压缩，已内置
		  optimizer: fis.plugin('clean-css')
		});

		fis.match('*.png', {
		  // fis-optimizer-png-compressor 插件进行压缩，已内置
		  optimizer: fis.plugin('png-compressor')
		});
	CssSprite图片合并
		只会对路径带 ?__sprite 的图片进行合并。分配到 useSprite: true 的 CSS 文件才会被处理。
		// 启用 fis-spriter-csssprites 插件
		fis.match('::package', {
		  spriter: fis.plugin('csssprites')
		})

		// 对 CSS 进行图片合并
		fis.match('*.css', {
		  // 给匹配到的文件分配属性 `useSprite`
		  useSprite: true
		});
	功能组合
		FIS3 做压缩、文件指纹、图片合并、资源定位合并。
		开发过程中，不需要压缩、合并图片、也不需要 hash。那么给上面配置追加如下配置
		fis.media('debug').match('*.{js,css,png}', {
		  useHash: false,
		  useSprite: false,
		  optimizer: null
		});
		此时的构建呢命令为 --- fis3 release debug
调试
	内置了Web Server，方便调试构建结果。
	目录
		Web Server的根目录 --- fis3 server open
	发布（不加-d参数默认被发到内置Web Server的根目录）
		fis3 release
	启动
		fis3 server start
		fis3 server -h(帮助)
	预览
		FIS3 内置的 Server 是常驻的，启动一次就可以了
	文件监听
		当启动文件监听时，修改文件会构建发布。
		fis3 release -w/--watch
	浏览器自动刷新
		文件修改自动构建发布后，如果浏览器能自动刷新
		fis3 release -l
		通常：fis3 release -wl
	发布到远端机器
		传统SMB、FTP上传
		只需在测试机上部署上传接收脚本
		fis.match('*', {
		  deploy: fis.plugin('http-push', {
			receiver: 'http://cq.01.p.p.baidu.com:8888/receiver.php',
			to: '/home/work/htdocs' // 注意这个是指的是测试机器的路径，而非本地机器
		  })
		});
		执行 --- fis3 release
		一般联调是最后一步
		fis.media('qa').match('*', {
		  deploy: fis.plugin('http-push', {
			receiver: 'http://cq.01.p.p.baidu.com:8888/receiver.php',
			to: '/home/work/htdocs' // 注意这个是指的是测试机器的路径，而非本地机器
		  })
		});	
		此时执行 --- fis3 release qa 上传测试机器
		fis3 release 产出到本地测试服务器根目录
	替代内置的Server
		若Web Server 的根目录是 /Users/my-name/work/htdocs
		fis3 release -d /Users/my-name/work/htdocs
		或
		fis.match('*', {
		  deploy: fis.plugin('local-deliver', {
			to: '/Users/my-name/work/htdocs'
		  })
		});
		fis3 release
内置语法
	资源定位：获取任何开发中所使用资源的线上路径；
		在html中定位资源 --- 包括src 和 href 属性
			可配置
			fis.match('*.{js,css,png,gif}', {
				useHash: true // 开启 md5 戳
			});

			// 所有的 js
			fis.match('**.js', {
				//发布到/static/js/xxx目录下
				release : '/static/js$0'
			});

			// 所有的 css
			fis.match('**.css', {
				//发布到/static/css/xxx目录下
				release : '/static/css$0'
			});

			// 所有image目录下的.png，.gif文件
			fis.match('/images/(*.{png,gif})', {
				//发布到/static/pic/xxx目录下
				release: '/static/pic/$1$2'
			});
		在js中定位资源
			可以使用编译函数 __uri(path) 来定位资源	
			var img = __uri('images/logo.gif');
			var img = '/images/logo_74e5229.gif';  //编译后
		在css中定位资源
			url(path) 以及 src=path
	内容嵌入：把一个文件的内容(文本)或者 base64 编码(图片)嵌入到另一个文件中；
		在html中嵌入资源
			给资源加 ?__inline 参数来标记资源嵌入需求。	
			html中嵌入页面文件
			<link rel="import" href="demo.html?__inline">
		在js中嵌入资源
			使用编译函数 __inline() 来提供内容嵌入能力。
			__inline('demo.js');  var img = __inline('images/logo.gif');
		在css中嵌入资源
			?__inline 编译标记都可以把文件内容嵌入进来
			@import url('demo.css?__inline'); background: url(images/logo.gif?__inline);
	依赖声明：在一个文本文件内标记对其他资源的依赖关系；
		在html中声明依赖 --- 生成一个mainfest.json文件表明各文件依赖，方便按需加载
			<!--
				@require demo.js
				@require "demo.css"
			-->
			// fis-conf.js
			fis.match('*.html', {
				useMap: true
			});

			fis.match('*.{js,css}', {
				// 开启 hash
				useHash: true
			});
		在js中声明依赖
			/**
			 * @require demo.css
			 * @require list.js
			 */
		在css中声明依赖
			/** @require reset.css */
	假设遇到后端模板、异构语言、前端模板等如何让内置语法起效呢？
	// FIS 中前端模板推荐预编译为 js，所以应该使用 js 的内置语法
	fis.match('*.tmpl', {
	  isJsLike: true
	});
	fis.match('*.sass', {
	  isCssLike: true
	});
	fis.match('*.xxhtml', {
	  isHtmlLike: true
	});
工作原理
	FIS3 是基于文件对象进行构建的，每个进入 FIS3 的文件都会实例化成一个 File 对象，整个构建过程都对这个对象进行操作完成构建任务。
	1.扫描项目目录拿到文件并初始化出一个文件对象列表
	2.对文件对象中每一个文件进行单文件编译
	3.获取用户设置的 package 插件，进行打包处理（包括合并图片）
		prepackager 打包前处理插件扩展点
		packager 打包插件扩展点，通过此插件收集文件依赖信息、合并信息产出静态资源映射表
		spriter 图片合并扩展点，如 csssprites
		postpackager 打包后处理插件扩展点
初级使用
	安装需要的插件
		npm install -g fis-parser-less               less文件预处理
		npm install -g fis3-postpackager-loader      对页面散列文件进行合并
	预处理
		1.安装了预处理插件
		2.配置启动插件
			fis.match('*.less', {
			  // fis-parser-less 插件进行解析
			  parser: fis.plugin('less'),
			  // .less 文件后缀构建后被改成 .css 文件
			  rExt: '.css'
			});
	简单合并
		每个页面值加载有用的资源
		fis.match('::package', {
		  postpackager: fis.plugin('loader', {
			allInOne: true
		  })
		});

		fis.match('*.less', {
		  parser: fis.plugin('less'),
		  rExt: '.css'
		});
	构建调试预览		
		fis3 release    (默认构建发布到本地测试服务根目录)
		fis3 server start --type node    启动内置服务器进行预览
中级使用
	预处理插件编写
	打包插件编写
	发布插件
高级使用
	静态资源映射表	
		当某个文件包含字符 __RESOURCE_MAP__，就会用表结构数据替换此字符。
	模块化开发
	基于Smarty的解决方案
	基于纯PHP的解决方案
	基于Laveral的解决方案
接口文档
	命令行 
		fis3 init
			fis3 脚手架工具，用来快速初始化项目。
			-h, --help            输出使用信息
			-r, --root <root>     设置项目的根目录
		fis3 install
			用来从组件平台中下载组件到当前项目中，并自动下载其依赖。
			-h, --help            输出使用信息
			--save                保存组件的依赖在components.json
			-r, --root <path>     设置项目的根目录
		fis3 release [media name] 
			编译发布一个FIS3项目，Options
			-h, --help            输出使用信息
			-d, --dest<path>      构建输出的地址
			-l, --lint            用于JSLint代码检查 
			-w, --watch           监听项目变化
			-L, --live            自动重写加载浏览器 
			-c, --clean           清除编译缓存
			-u, --unique          启用独立缓存
		fis3 server
			fis3 内置了一个小型 web server, 可以通过 fis3 server start 快速开启。
			要求用户机器上必须安装有 jre 和 php-cgi 程序。
			fis3 server start      开启服务
			fis3 server stop       关闭服务
			fis3 server restart    重启服务
			fis3 server info       输出服务信息
			fis3 server open       打开服务的根目录
			fis3 server clean      在根目录清除文件
			fis3 server install <name>  安装服务框架
			Options
			-h, --help             输出使用信息
			-p, --port <int>       服务监听的端口
			--root                 根目录
			--type <php|java|node> 进程语言 
		fis3 inspect [media name]
			用来查看文件 match 结果
	配置	
		配置接口	
			fis.match()  --- 首先会加载项目内的所有文件，然后通过 fis.match() 来为某一个文件分配不同的属性，这些属性叫做文件属性。
				//对a.js、b.js、c.js进行压缩
				fis.match('{a,b,c}.js', {
					optimizer: fis.plugin('uglify-js')
				});
			fis.media()  --- 我们在不同状态（情形）下给文件分配不同属性。 
				//区分开发 和 生产环境为同一位见分配不同属性
				//开发环境
				fis.match('**.js', {

				});
				//生产环境
				fis.media('prod')
					.match('**.js', {
						optimizer: fis.plugin('uglify-js')
					})
					.match('**.css', {
						optimizer: fis.plugin('clean-css')
					});
				//构建发布
				fis3 release <media>
			!important --- fis.match('', {}, true); //第三个参数表示，不能被覆盖
			::package  --- 表示当 packager 阶段所有的文件都分配某些属性
				fis.match('::package', {   
					packager: fis.plugin('map')
				});
			::image    --- 表示对所有的图片进行处理
				// 所有被标注为图片的文件添加 hash
				fis.match('::image', {
				  useHash: true
				});
			::text     --- 表示对所有文本进行处理
				// 所有被标注为文本的文件去除 hash
				fis.match('::text', {
				  useHash: false
				});
			:js        --- 表示对所有的内联js进行处理
				// 压缩 index.html 内联的 js
				fis.match('index.html:js', {
				  optimizer: fis.plugin('uglify-js')
				});
			:css       --- 表示对所有的内联css进行处理	
				// 压缩 index.html 内联的 css
				fis.match('index.html:css', {
				  optimizer: fis.plugin('clean-css')
				});
		配置接口 --- 包括配置、压缩、CDN、合并等
			配置API
				fis.set() --- 设置一些配置，如project、namespace、modules、settings。
					fis.set(key, value);
					fis.set('namespace', 'home');
				fis.get() --- 获取已经配置的属性
					fis.get(key)
					var ns = fis.get('namespace'); //home
				fis.match() --- 给匹配到的文件分配属性
					fis.match(selector, props[, important])
				fis.media() --- 一般分为dev、qa、prod
					fis.media(mode)
				fis.plugin() --- 插件调用接口  
					fis.plugin(name [, props [, position]])
					fis.match('*.less', {
					   parser: fis.plugin('another', null, 'append');
					});
			配置属性
				全局属性
					全局属性通过 fis.set 设置，通过 fis.get 获取。
				内置的默认配置
					var DEFAULT_SETTINGS = {
					  project: {
						charset: 'utf8',
						md5Length: 7,
						md5Connector: '_',
						files: ['**'],
						ignore: ['node_modules/**', 'output/**', '.git/**', 'fis-conf.js']
					  },

					  component: {
						skipRoadmapCheck: true,
						protocol: 'github',
						author: 'fis-components'
					  },

					  modules: {
						hook: 'components',
						packager: 'map'
					  },

					  options: {}
					};
					//可通过覆盖方式更改
					fis.set('project.charset', 'gbk');
				基本属性
					release -- 设置文件的产出路径
					packTo -- 分配到这个属性的文件将会合并到这个属性配置的文件中
					packOrder -- 用来控制合并时的顺序，值越小越在前面。配合 packTo 一起使用。
					query -- 指定文件的资源定位路径之后的query，比如'?t=123124132'
					id -- 指定文件的资源id ；默认值：namespace + subpath
					moduleId -- 指定文件资源的模块id；默认值：**namespace + subpath**
					url -- 指定文件的资源定位路径，以 / 开头。
					charset -- 指定文本文件的输出编码。
					isHtmlLike -- 指定对文件进行 html 相关语言能力处理
					isCssLike -- 指定对文件进行 css 相关的语言能力处理
					isJsLike -- 指定对文件进行 js 相关的语言能力处理
					useHash -- 文件是否携带 md5 戳
					domain -- 给文件 URL 设置 domain 信息
					rExt -- 设置最终文件产出后的后缀
					useMap -- 文件信息是否添加到 map.json
					isMod -- 标示文件是否为组件化文件
					extras -- 在[静态资源映射表][]中的附加数据，用于扩展[静态资源映射表][]表的功能。
					requires -- 默认依赖的资源id表
					useSameNameRequire -- 开启同名依赖
					useCache --  文件是否使用编译缓存
				插件属性
					插件属性决定了匹配的文件进行哪些插件的处理；
					lint -- 启用 lint 插件进行代码检查
					parser -- 启用 parser 插件对文件进行处理；
					preprocessor -- 标准化前处理	
					standard -- 自定义标准化，可以自定义 uri、embed、require 等三种能力，可自定义三种语言能力的语法
					postprocessor -- 标准化后处理
					optimizer -- 启用优化处理插件，并配置其属性
					打包阶段插件
						prepackager -- 打包预处理插件
						packager -- 打包插件
						spriter -- 打包后处理csssprite的插件
						postpackager -- 打包后处理插件
						deploy -- 设置项目发布方式
常用配置
	制定目录规范
	源码目录规范
		├── page         //放页面模版
		│   └── index.html  
		├── static       //一些公用的静态资源
		│   └── lib      //放置一些公共库，例如 jquery, zepto, lazyload 等
		├── test         //测试数据和用例 
		└── widget       //一切组件，包括模板、css、js、图片以及其他前端资源
			├── header
			├── nav
			└── ui
	编译产出目录规范
		├── static      //所有的静态资源都放到这个目录下
		├── template    //所有的模板都放到这个目录下
		└── test        //测试数据和用例
	部署远端测试机				
					
					
					
					
					
					
					
					
					
面对国内的浏览器使用情况的现实吧，还有很长一段时间要使用jquery，再好好复习下jquery的api吧！不在那么任性了。
一.Ajax
	1.全局Ajax事件处理器（均只能绑定到document元素上）
		.ajaxStart(handler())
			在AJAX 请求刚开始时执行一个处理函数。 这是一个 Ajax Event.
		.ajaxSend(handler(event, jqXHR, ajaxOptions))
			在Ajax请求发送之前绑定一个要执行的函数，这是一个 Ajax Event.
		.ajaxComplete(handler(event, XMLHttpRequest, ajaxOptions))
			在Ajax请求完成后注册一个回调函数。这是一个AjaxEvent。
			应用：我们能限制我们的回调到只处理事件处理某一特定的URL
		.ajaxError(handler(event, jqXHR, ajaxSettings, thrownError))
			在Ajax请求出错时注册一个回调处理函数，这是一个 Ajax Event。
		.ajaxStop(handler())
			在AJAX 请求完成时执行一个处理函数。 这是一个 Ajax Event.	
		.ajaxSuccess(handler(event, XMLHttpRequest, ajaxOptions))
			绑定一个函数当 Ajax 请求成功完成时执行。 这是一个Ajax Event.
	2.辅助函数
		.param()
			创建一个数组或对象序列化的的字符串，适用于一个URL 地址查询字符串或Ajax请求。
		.serialize()
			将用作提交的表单元素的值编译成字符串。
		.serializeArray()
			将用作提交的表单元素的值编译成拥有name和value对象组成的数组。
	3.底层接口	
		.ajax()	
			执行一个异步的HTTP（Ajax）的请求。
		.ajaxPrefilter()
			在每个请求之前被发送和$.ajax()处理它们前处理，设置自定义Ajax选项或修改现有选项。
		.ajaxSetup()
			为以后要用到的Ajax请求设置默认的值
		.ajaxTransport()
			创建一个对象，用于处理Ajax数据的实际传输。
	4.快捷方法
		.get()
			使用一个HTTP GET请求从服务器加载数据。
		.getJSON()
			使用一个HTTP GET请求从服务器加载JSON编码的数据。
		.getScript()
			使用一个HTTP GET请求从服务器加载并执行一个 JavaScript 文件
		.post()
			使用一个HTTP POST 请求从服务器加载数据。
		.load()
			从服务器载入数据并且将返回的 HTML 代码并插入至 匹配的元素 中。
二.DOM属性
	addClass()
		为每个匹配的元素添加指定的样式类名
	hasClass()
		确定任何一个匹配元素是否有被分配给定的（样式）类。
	removeClass()
		移除集合中每个匹配元素上一个，多个或全部样式。
	toggleClass()
		在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类。
	attr()
		获取匹配的元素集合中的第一个元素的属性的值。设置每一个匹配元素的一个或多个属性。
	removeAttr()
		为匹配的元素集合中的每个元素中移除一个属性（attribute）。
	prop()用于返回 ture或false的属性
		获取匹配的元素集中第一个元素的属性（property）值为匹配的元素设置一个或多个属性（properties）。
	removeProp()
		为集合中匹配的元素删除一个属性（property）。
	text()
		获取定义文本
	html()
		获取集合中第一个匹配元素的HTML内容 设置每一个匹配元素的html内容。
	val()获取表单元素的值
		获取匹配的元素集合中第一个元素的当前值。设置匹配的元素集合中每个元素的值。
三.回调对象
	jQuery.Callbacks() 函数返回一个全能的对象，此对象对管理回调列表提供了强大的方式。它能够增加、删除、触发、禁用回调函数。
	$.Callbacks().add()
		回调列表中添加一个回调或回调的集合。
	$.Callbacks().disable()	
		禁用回调列表中的回调。
	$.Callbacks().disabled()
		确定回调列表是否已被禁用。
	$.Callbacks().empty()
		从列表中删除所有的回调。
	$.Callbacks().fire()
		传入指定的参数调用所有的回调。
	$.Callbacks().fireWith()	
		访问给定的上下文和参数列表中的所有回调。
	$.Callbacks().fired()
		确定回调是否至少已经调用一次。
	$.Callbacks().has()	
		确定列表中是否提供一个回调。
	$.Callbacks().lock()	
		锁定回调列表的当前状态。
	$.Callbacks().locked()	
		确定回调列表是否已被锁定。
	$.Callbacks().remove()	
		从回调列表中的删除一个回调或回调集合。
四.核心API
	jQuery.holdReady()	
		暂停或恢复.ready() 事件的执行。
	jQuery()
		接受一个包含一个CSS选择器的字符串，用于匹配的一组元素。根据提供的原始 HTML 标记字符串，动态创建由 jQuery 对象包装的 DOM 元素。当DOM完成加载的时候绑定一个要执行的函数。
	jQuery.noConflict()	
		放弃jQuery控制$ 变量。
	jQuery.when()
		提供一种方法来执行一个或多个对象的回调函数， Deferred(延迟)对象通常表示异步事件。
		
五.CSS		
	.addClass()
		为每个匹配的元素添加指定的样式类名
	.removeClass()
		移除集合中每个匹配元素上一个，多个或全部样式。
	.toggleClass()
		在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类。
	.css()
		获取匹配元素集合中的第一个元素的样式属性的值设置每个匹配元素的一个或多个CSS属性。
	.hasClass()
		确定任何一个匹配元素是否有被分配给定的（样式）类。
	.offset()
		在匹配的元素集合中，获取的第一个元素的当前坐标，坐标相对于文档。 设置匹配的元素集合中每一个元素的坐标， 坐标相对于文档。
	.position()
		获取匹配元素中第一个元素的当前坐标，相对于offset parent的坐标。( 译者注：offset parent指离该元素最近的而且被定位过的祖先元素 )
	.scrollLeft()  ||  .scrollTop()
		获取匹配的元素集合中第一个元素的当前水平滚动条的位置。设置每个匹配元素的水平滚动条位置。
	.cssHooks()
		直接向 jQuery 中添加钩子，用于覆盖设置或获取特定 CSS 属性时的方法，目的是为了标准化 CSS 属性名或创建自定义属性。
	.cssNumber	
		一个对象包含所有CSS属性,可能没有一个单位使用。. css()方法使用这个对象是否可以追加px无单位的值。
六.数据操作
	.queue()
		显示在匹配的元素上的已经执行的函数列队。在匹配元素上操作已经附加函数的列表。
	.clearQueue()
		从列队中移除所有未执行的项。
	.dequeue()
		执行匹配元素队列的下一个函数。
	.data()
		在匹配元素上存储任意相关数据. 返回匹配的元素集合中的第一个元素的给定名称的数据存储的值。 通过.data(name, value)或HTML5 data-* 属性设置
	.removeData()
		在元素上移除绑定的数据
	jQuery.data()
		存储任意数据到指定的元素,返回设置的值。 返回用jQuery.data(element, name, value)储存在元素上的相应名字的数据，或者元素上完整的数据存储
	jQuery.dequeue()
		在匹配的元素上执行队列中的下一个函数。
	jQuery.hasData()
		确定任何一个元素是否有与之相关的jQuery数据。
	jQuery.queue()
		显示在匹配的元素上的已经执行的函数列队。操作匹配元素上将要执行的函数队列。
	jQuery.removeData()	
		删除一个先前存储的数据片段。element，name
七.延迟对象
	jQuery.Deferred()
	deferred.always()	
		当Deferred（延迟）对象解决或拒绝时，调用添加处理程序。
	deferred.done()
		当Deferred（延迟）对象解决时，调用添加处理程序。
	deferred.fail()
		当Deferred（延迟）对象拒绝时，调用添加的处理程序。
	deferred.notify()
		根据给定的 args参数 调用Deferred（延迟）对象上进行中的回调 （progressCallbacks）。
	deferred.notifyWith()
		根据给定的上下文（context）和args递延调用Deferred（延迟）对象上进行中的回调（progressCallbacks ）。
	deferred.progress()
		当Deferred（延迟）对象生成进度通知时，调用添加处理程序。
	deferred.promise()
		返回Deferred(延迟)的Promise（承诺）对象。
	deferred.reject()
		拒绝Deferred（延迟）对象，并根据给定的args参数调用任何失败回调函数（failCallbacks）。
	deferred.rejectWith()
		拒绝Deferred（延迟）对象，并根据给定的 context和args参数调用任何失败回调函数（failCallbacks）。
	deferred.resolve()
		解决Deferred（延迟）对象，并根据给定的args参数调用任何完成回调函数（doneCallbacks）。
	deferred.resolveWith()
		解决Deferred（延迟）对象，并根据给定的 context和args参数调用任何完成回调函数（doneCallbacks）。
	deferred.state()
		确定一个Deferred（延迟）对象的当前状态。
	deferred.then()
		当Deferred（延迟）对象解决，拒绝或仍在进行中时，调用添加处理程序。
	jQuery.Deferred()
		一个构造函数，返回一个链式实用对象方法来注册多个回调，回调队列，  调用回调队列，并转达任何同步或异步函数的成功或失败状态。
	jQuery.when()	
		提供一种方法来执行一个或多个对象的回调函数， Deferred(延迟)对象通常表示异步事件。
	.promise()
		返回一个 Promise 对象，用来观察当某种类型的所有行动绑定到集合，排队与否还是已经完成。
八.尺寸
	.height()  || .width()
		获取匹配元素集合中的第一个元素的当前计算高度值。设置每一个匹配元素的高度值。
	.innerHeight() || .innerWidth()
		为匹配的元素集合中获取第一个元素的当前计算高度值,包括padding，但是不包括border。
	.outerHeight()  || .outerWidth()
		获取元素集合中第一个元素的当前计算高度值,包括padding，border和选择性的margin。返回一个整数（不包含“px”）表示的值  ，或如果在一个空集合上调用该方法，则会返回 null。		
九.特效
	1.基本特效
		.hide()
			隐藏匹配的元素。
		.show()
			显示匹配的元素。
		.toggle()
			.toggle()
	2.自定义
		jQuery.fx.interval
			该动画的频率（以毫秒为单位）。
		jQuery.fx.off
			全局的禁用所有动画。
		.animate()
			根据一组 CSS 属性，执行自定义动画。
		.queue()
			显示在匹配的元素上的已经执行的函数列队。在匹配元素上操作已经附加函数的列表。
		.clearQueue()
			从列队中移除所有未执行的项。
		.delay()
			设置一个延时来推迟执行队列中后续的项。
		.dequeue()
			执行匹配元素队列的下一个函数。
		.finish()
			停止当前正在运行的动画，删除所有排队的动画，并完成匹配元素所有的动画。
		.stop()
			停止匹配元素当前正在运行的动画。
	3.渐变
		.fadeIn()
			通过淡入的方式显示匹配元素。
		.fadeOut()
			通过淡出的方式隐藏匹配元素。
		.fadeTo()
			调整匹配元素的透明度。
		.fadeToggle()
			通过匹配的元素的不透明度动画，来显示或隐藏它们。
	4.滑动
		.slideDown()
			用滑动动画显示一个匹配元素。
		.slideUp()
			用滑动动画隐藏一个匹配元素。
		.slideToggle()
			用滑动动画显示或隐藏一个匹配元素。
十.事件
	1.浏览器事件
		.error()
			为 JavaScript 的 "error" 事件绑定一个处理函数。
		.resize()
			为 JavaScript 的 "resize" 事件绑定一个处理函数，或者触发元素上的该事件。
		.scroll()
			为 JavaScript 的 "scroll" 事件绑定一个处理函数，或者触发元素上的该事件。
	2.文档加载
		.load()
			为 JavaScript 的 "load" 事件绑定一个处理函数。
		.ready()
			当DOM准备就绪时，指定一个函数来执行。
		.unload()
			为 JavaScript 的 "unload" 事件绑定一个处理函数。
	3.绑定事件处理器
		.bind()
			为一个元素绑定一个事件处理程序。
		.unbind()
			从元素上删除一个以前附加事件处理程序。
		.on()
			在选定的元素上绑定一个或多个事件处理函数。
		.off()
			移除一个事件处理函数。
		.one()
			为元素的事件添加处理函数。处理函数在每个元素上每种事件类型最多执行一次。
		.trigger()
			根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为。
		.triggerHandler()
			为一个事件执行附加到元素的所有处理程序。
		.delegate()
			为所有匹配选择器（selector参数）的元素绑定一个或多个事件处理函数，基于一个指定的根元素的子集，匹配的元素包括那些目前已经匹配到的元素，也包括那些今后可能匹配到的元素。
		.undelegate()
			删除当前选择器匹配的所有元素的事件处理程序，根据一组特定根元素的集合。
		jQuery.proxy()
			接受一个函数，然后返回一个新函数，并且这个新函数始终保持了特定的上下文语境。
	4.事件对象
		Event Properties
			target
			relatedTarget
			pageX
			pageY
			which
			metaKey
			altKey, bubbles, button, cancelable, charCode, clientX, clientY, ctrlKey, currentTarget, data, detail, eventPhase, metaKey, offsetX, offsetY, originalTarget, pageX, pageY, relatedTarget, screenX, screenY, shiftKey, target, view, which
		OtherProperties
			event.currentTarget
				在事件冒泡过程中的当前DOM元素。
			event.data
				当当前正在执行的处理程序绑定时，一个可选的数据对象传递给一个事件方法。
			event.deletateTarget
				绑定了当前正在调用jQuery 事件处理器的元素。
			event.preventDefault()
				如果调用这个方法，默认事件行为将不再触发。
			event.isDefaultPrevented()
				根据事件对象中是否调用过 event.preventDefault() 方法,来返回一个布尔值。
			event.stopImmediatePropagation()
				阻止剩余的事件处理函数执行并且防止事件冒泡到DOM树上。
			event.isImmediatePropagationStopped()
				根据事件对象中是否调用过 event.stopImmediatePropagation() 方法,来返回一个布尔值。
			event.stopPropagation()
				防止事件冒泡到DOM树上，也就是不触发的任何前辈元素上的事件处理函数。
			event.isPropagationStopped()
				根据事件对象中是否调用过 event.stopPropagation() 方法,来返回一个布尔值。
			event.metaKey
				表示事件触发时哪个Meta键被按下。
			event.namespace
				当事件被触发时此属性包含指定的命名空间。
			event.pageX
				鼠标相对于文档的左边缘的位置（左边）
			event.pageY
				鼠标相对于文档的顶部边缘的位置（坐标）。
			event.relatedTarget
				在事件中涉及的其它任何DOM元素。
			event.result
				事件被触发的一个事件处理程序的最后返回值，除非值是 undefined。
			event.target
				触发事件的DOM元素。
			event.timeStamp
				这个属性返回事件触发时距离1970年1月1日的毫秒数。
			event.type
				描述事件的性质。
			event.which
				针对键盘和鼠标事件，这个属性能确定你到底按的是哪个键。
	5.表单事件
		.blur()
			为 "blur" 事件绑定一个处理函数，或者触发元素上的 "blur" 事件（注：此事件不支持冒泡）。
		.change()
			为JavaScript 的 "change" 事件绑定一个处理函数，或者触发元素上的 "change" 事件。
		.focus()
			为 JavaScript 的 "focus" 事件绑定一个处理函数，或者触发元素上的 "focus" 事件。
		.focusin()
			将一个事件函数绑定到"focusin" 事件。
		.focusout()	
			将一个事件函数绑定到"focusout" 事件。
		.select()
			为 JavaScript 的 "select" 事件绑定一个处理函数，或者触发元素上的该事件。
		.submit()
			为 JavaScript 的 "submit" 事件绑定一个处理函数，或者触发元素上的该事件。
	6.键盘事件
		.keydown()
			为 "keydown" 事件绑定一个处理函数，或者触发元素上的 "keydown" 事件。
		.keypress()
			为 "keypress" 事件绑定一个处理函数，或者触发元素上的 "keypress" 事件。
		.keyup()
			为 "keyup" 事件绑定一个处理函数，或者触发元素上的 "keyup" 事件。
	7.鼠标事件
		.click()
			为 JavaScript 的"click" 事件绑定一个处理器，或者触发元素上的 "click" 事件。
		.dblclick()
			为JavaScript 的 "dblclick" 事件绑定一个处理函数，或者触发元素上的 "dblclick" 事件。
		.hover()
			将二个事件函数绑定到匹配元素上，分别当鼠标指针进入和离开元素时被执行。将一个单独事件函数绑定到匹配元素上，分别当鼠标指针进入和离开元素时被执行。
		.mousedown()
			为 JavaScript 的 "mousedown" 事件绑定一个处理函数，或者触发元素上的该事件。
		.mouseenter()	
			为 mouse enters（鼠标进入） 事件绑定一个处理函数，或者触发元素上的 mouse enters（鼠标进入） 事件。
		.mouseleave()
			为 mouse leaves（鼠标离开） 事件绑定一个处理函数，或者触发元素上的 mouse leaves（鼠标离开） 事件。
		.mousemove()
			为 JavaScript 的 "mousemove" 事件绑定一个处理函数，或者触发元素上的该事件。
		.mouseout()
			为 JavaScript 的 "mouseout" 事件绑定一个处理函数，或者触发元素上的该事件。（注：支持事件冒泡）
		.mouseover()
			为 JavaScript 的 "mouseover" 事件绑定一个处理函数，或者触发元素上的该事件。（注：支持事件冒泡）
		.mouseup()
			为 JavaScript 的 "mouseup" 事件绑定一个处理函数，或者触发元素上的该事件。
		.toggle()
十一.表单
		.blur()
			为 "blur" 事件绑定一个处理函数，或者触发元素上的 "blur" 事件（注：此事件不支持冒泡）。
		.change()
			为JavaScript 的 "change" 事件绑定一个处理函数，或者触发元素上的 "change" 事件。
		.focus()
			为 JavaScript 的 "focus" 事件绑定一个处理函数，或者触发元素上的 "focus" 事件。
		.focusin()
			将一个事件函数绑定到"focusin" 事件。
		.focusout()
			将一个事件函数绑定到"focusout" 事件。
		jQuery.param()
			创建一个数组或对象序列化的的字符串，适用于一个URL 地址查询字符串或Ajax请求。
		.select()
			为 JavaScript 的 "select" 事件绑定一个处理函数，或者触发元素上的该事件。
		.serialize()
			将用作提交的表单元素的值编译成字符串。
		.serializeArray()
			将用作提交的表单元素的值编译成拥有name和value对象组成的数组。例如[ { name: a value: 1 }, { name: b value: 2 },...]
		.submit()
			为 JavaScript 的 "submit" 事件绑定一个处理函数，或者触发元素上的该事件。
		.val()
			获取匹配的元素集合中第一个元素的当前值。设置匹配的元素集合中每个元素的值。
十二.内部函数
	jQuery.error()	
		接受一个字符串，并抛出包含这个字符串的异常。	
	.jquery
		一个包含了jQuery版本号的字符串。
	.pushStack()
		将一个DOM元素集合加入到jQuery栈。
十三.DOM操作
	1.Class属性
		addClass()
		hasClass()
		removeClass()
		toggleClass()
	2.复制元素
		.clone()
	3.DOM插入
			
	4.DOM插入并包裹现有内容
		.unwrap()
			将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。
		.wrap()
			在每个匹配的元素外层包上一个html元素。
		.wrapAll()
			在所有匹配元素外面包一层HTML结构。
		.wrapInner()
			在匹配元素里的内容外包一层结构。
	5.DOM 插入现有元素内
		append()
			在被选元素的结尾插入内容(内部)
		appendTo()
		prepend()
			在被选元素的开头插入内容(内部)
		prependTo()
		.html()
			获取集合中第一个匹配元素的HTML内容 设置每一个匹配元素的html内容。
		.text()
			得到匹配元素集合中每个元素的合并文本，包括他们的后代设置匹配元素集合中每个元素的文本内容为指定的文本内容。
	6.DOM 插入现有元素外		
		after()
			在被选元素之后插入内容(同级)
		insertAfter()
		before() 
			在被选元素之前插入内容(同级)	
		insertBefore()	
	7.DOM 移除		
		detach()	
			从DOM中去掉所有匹配的元素。
		empty()
			从DOM中移除集合中匹配元素的所有子节点。
		remove()	
			将匹配元素集合从DOM中删除。（注：同时移除元素上的事件及 jQuery 数据。）
		unwrap()	
			将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。
	8.DOM 替换
		replaceAll()
			用集合的匹配元素替换每个目标元素。
		replaceWith()	
			用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合。
	9.通用属性操作
		attr()
		removeAttr()
		prop()
		removeProp()
		val()
	10.css属性
		css()
		height()  ||  width()
		innerHeight()  ||  innerWidth()
		outerHeight()  ||  OuterWidth()
		offset() //返回一个对象{left:'',top:''}
		position()
		scrollLeft()
		scrollTop()
		jQuery.cssNumber	
十四.杂项
	1.集合操作
		each()
			遍历一个jQuery对象，为每个匹配元素执行一个函数。
		jQuery.param()
			创建一个数组或对象序列化的的字符串，适用于一个URL 地址查询字符串或Ajax请求。
	2.数据存储
		data()
			在匹配元素上存储任意相关数据. 返回匹配的元素集合中的第一个元素的给定名称的数据存储的值。 通过.data(name, value)或HTML5 data-* 属性设置
		removeData()
			在元素上移除绑定的数据
	3.DOM 元素方法
		get()
			通过jQuery对象获取一个对应的DOM元素。通过检索匹配jQuery对象得到对应的DOM元素。
		index()
			从匹配的元素中搜索给定元素的索引值，从0开始计数。
		size()
			返回的jQuery对象匹配的DOM元素的数量。
		toArray()
			返回一个包含jQuery对象集合中的所有DOM元素的数组。
	4.设置
		jQuery.noConflict()
			放弃jQuery控制$ 变量。
十五.偏移
	offset()
		在匹配的元素集合中，获取的第一个元素的当前坐标，坐标相对于文档。 设置匹配的元素集合中每一个元素的坐标， 坐标相对于文档。
	offsetParent()
		取得离指定元素最近的含有定位信息的祖先元素。含有定位信息的元素指的是，CSS 的 position 属性是 relative, absolute, 或 fixed 的元素。
	position()
		获取匹配元素中第一个元素的当前坐标，相对于offset parent的坐标。( 译者注：offset parent指离该元素最近的而且被定位过的祖先元素 )
	scrollLeft()
		获取匹配的元素集合中第一个元素的当前水平滚动条的位置。设置每个匹配元素的水平滚动条位置。
	scrollTop()
		获取匹配的元素集合中第一个元素的当前垂直滚动条的位置或设置每个匹配元素的垂直滚动条位置。设置每个匹配元素的垂直滚动条位置。
十六.内部属性
	1.jQuery对象实例的属性
		.jquery	
			一个包含了jQuery版本号的字符串。
		.length
			在jQuery对象中元素的数量。
	2.全局jQuery对象的属性
		jQuery.fx.interval
			该动画的频率（以毫秒为单位）。
		jQuery.fx.off
			全局的禁用所有动画。
十七.选择器
	1.属性选择器
		$( "[attribute|='value']" )
			选择指定属性值等于给定字符串或以该字符串为前缀（该字符串后跟一个连字符“-” ）的元素。
		$( "[attribute*='value']" )
			选择指定属性具有包含一个给定的子字符串的元素。（选择给定的属性是以包含某些值的元素）
		$( "[attribute~='value']" )
			选择指定属性用空格分隔的值中包含一个给定值的元素。
		$( "[attribute^='value']" )
			选择指定属性是以给定值开头的元素。这个比较是区分大小写的。
		$( "[attribute$='value']" )
			选择指定属性是以给定值结尾的元素。这个比较是区分大小写的。
		$( "[attribute='value']" )
			选择指定属性是等于给定值结尾的元素。
		$( "[attribute!='value']" )
			选择不存在指定属性，或者指定的属性值不等于给定值的元素。
		$( "[attribute]" )
			选择所有具有指定属性的元素，该属性可以是任何值。
		$( "[attributeFilter1][attributeFilter2][attributeFilterN]" )
			选择匹配所有指定的属性筛选器的元素。
	2.基础选择器
		$( "*" )
			选择所有元素.
		$( ".class" )
			选择给定样式类名的所有元素。
		$( "element" )
			根据给定（html）标记名称选择所有的元素。
		$( "#id" )
			选择一个具有给定id属性的单个元素。
		$( "selector1, selector2, selectorN" )
			将每一个选择器匹配到的元素合并后一起返回。
	3.基础过滤
		$( "div:animated" ) ---- 首先使用纯CSS选择器选择元素，然后使用.filter(":animated").
			选择所有正在执行动画效果的元素。
		$( "td:lt(4)" ) ---- 使用代替 $("selector").slice(0, index)
			选择匹配集合中所有小于给定index（索引值）的元素。
		$( "div:eq(index)" ) ---- 使用代替 $("selector").eq(index)
			在匹配的集合中选择索引值为index的元素。
		$( "p" ).get(0) 
			方法获得由选择器指定的 DOM 元素。
		$( "td:gt(4)" ) ---- 使用代替 $("selector").slice(index)
			选择匹配集合中所有大于给定index（索引值）的元素。
		$( "tr:odd" )
			选择所引值为奇数的元素，从 0 开始计数。
		$( "tr:even" )
			选择所引值为偶数的元素，从 0 开始计数。
		$( "tr:first" )
			选择第一个匹配的元素。
		$( "tr:last" )
			选择最后一个匹配的元素。
		$( "input:focus" )
			选择当前获取焦点的元素。
		$(":header")
			选择所有标题元素，像h1, h2, h3 等。
		$( "div:lang(en-us)" )	
			选择指定语言的所有元素。
		$( "input:not(:checked)" ) ---- 使用代替 $("selector").not()
			选择所有元素去除不匹配给定的选择器的元素。
		$( ":root" )
			选择该文档的根元素。
		$( "p:target" )
			选择由文档URI的格式化识别码表示的目标元素。
			例如：给定的URI http://example.com/#foo， $( "p:target" )，将选择<p id="foo">元素。
	4.子元素过滤
		$("div :first-child")
			选择所有父级元素下的第一个子元素。
		$("span:first-of-type")
			选择所有相同的元素名称的第一个兄弟元素。
		$("div :last-child")
			选择所有父级元素下的最后一个子元素。
		$("span:last-of-type")
			选择的所有元素之间具有相同元素名称的最后一个兄弟元素。
		$("ul li:nth-child(2)") //索引为1开始，odd、even、4n关键字
			选择的他们所有父元素的第n个子元素。
		$("ul li:nth-last-child(2)")
			选择所有他们父元素的第n个子元素。计数从最后一个元素开始到第一个。
		$( "span:nth-of-type(2)" )
			选择同属于一个父元素之下，并且标签名相同的子元素中的第n个。
		$("ul li:nth-last-of-type(2)")
			选择的所有他们的父级元素的第n个子元素，计数从最后一个元素到第一个。
		$( "div button:only-child" )
			如果某个元素是其父元素的唯一子元素，那么它就会被选中。
		$( "button:only-of-type" )
			选择所有没有兄弟元素，且具有相同的元素名称的元素。
	5.内容过滤
		$("div:contains('John')")
			选择所有包含指定文本的元素。
		$("td:empty")
			选择所有没有子元素的元素（包括文本节点）。
		$("div:has(p)") ---- 使用代替 $("selector").has(selector/DOMElement)
			选择元素其中至少包含指定选择器匹配的一个种元素。
		$("td:parent")
			选择所有含有子元素或者文本的父级元素。
	6.表单（为了性能，以下均用首先使用纯CSS选择器选择元素，然后使用.filter("")代替）
		$(":button")
			选择所有按钮元素和类型为按钮的元素。
		$("form input:checkbox") ---- 使用[type="checkbox"]代替.
			选择所有类型为复选框的元素
		$( "input:checked" )
			匹配所有勾选的元素。
		$("input:disabled")	
			选择所有被禁用的元素。
		$("input:enabled")
			选择所有可用的（注：未被禁用的元素）元素。
		$("input:file") ---- 使用[type="file"] 代替。
			选择所有类型为文件（file）的元素。
		$( ":focus" )
			选择当前获取焦点的元素。
		$("input:image") ---- 使用[type="image"] 代替。
			选择所有图像类型的元素。
		$(":input")
			选择所有 input, textarea, select 和 button 元素.
		$("input:password") ---- 使用[type="password"]代替.
			选择所有类型为密码的元素。
		$("input:radio") ---- 使用[type="radio"]代替.
			选择所有类型为radio的元素。	
		$("input:reset") ---- 使用[type="reset"]代替.
			选择所有类型为reset的元素。	
		$("input:selected") ---- 使用[type="selected"]代替.
			选择所有类型为selected的元素。
		$("input:submit") ---- 使用[type="submit"]代替.
			选择所有类型为submit的元素。
		$("input:text") ---- 使用[type="text"]代替.
			选择所有类型为text的元素。	
	7.层级
		$( "parent > child" )
			选择所有指定“parent”元素中指定的"child"的直接子元素。
		$( "parent child" )	
			选择给定的祖先元素的所有后代元素。
		$( "prev + next" )	
			选择所有紧接在 “prev” 元素后的 “next” 元素。
		$( "prev ~ siblings" )	
			匹配 “prev” 元素之后的所有兄弟元素。具有相同的父元素，并匹配过滤“siblings”选择器。	
	8.jQuery扩展
	9.可见行过滤
		$( ":hidden" )
			选择所有隐藏的元素。
		$( ":visible" )	
			选择所有可见的元素。
十八.遍历			
	1.过滤
		eq()
			减少匹配元素的集合为指定的索引的哪一个元素。
		filter()	
			筛选元素集合中匹配表达式 或 通过传递函数测试的 那些元素集合。
		first()
			获取匹配元素集合中第一个元素。
		last()
			获取匹配元素集合中最后一个元素。	
		has()
			筛选匹配元素集合中的那些有相匹配的选择器或DOM元素的后代元素。
		is()
			判断当前匹配的元素集合中的元素，是否为一个选择器，DOM元素，或者jQuery对象，如果这些元素至少一个匹配给定的参数，那么返回true。
		map()
			通过一个函数匹配当前集合中的每个元素,产生一个包含新的jQuery对象。
		not()
			从匹配的元素集合中移除指定的元素。
		slice()
			根据指定的下标范围，过滤匹配的元素集合，并生成一个新的 jQuery 对象。
	2.其它遍历
		add()
			添加元素到匹配的元素集合。
		addBack()	
			添加堆栈中元素集合到当前集合，一个选择性的过滤选择器。
		contents()
			获得匹配元素集合中每个元素的子元素，包括文字和注释节点。
		end()
			终止在当前链的最新过滤操作，并返回匹配的元素的以前状态。
		not()
			从匹配的元素集合中移除指定的元素。
	3.树遍历
		1.父级
			closest()
				从元素本身开始，在DOM 树上逐级向上级元素匹配，并返回最先匹配的祖先元素。以数组的形式返回与选择器相匹配的所有元素，从当前元素开始，在 DOM 树中向上遍历。
			parent()
				取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器。
			parents()
				获得集合中每个匹配元素的祖先元素，可以提供一个可选的选择器作为参数。
			parentsUntil()
				查找当前元素的所有的前辈元素，直到遇到选择器， DOM 节点或 jQuery 对象匹配的元素为止，但不包括这些元素。
			offsetParent()
				取得离指定元素最近的含有定位信息的祖先元素。含有定位信息的元素指的是，CSS 的 position 属性是 relative, absolute, 或 fixed 的元素。
		2.子级
			children()
				获得匹配元素集合中每个元素的子元素，选择器选择性筛选。
			find()
				通过一个选择器，jQuery对象，或元素过滤，得到当前匹配的元素集合中每个元素的后代。
		3.同级
			next()
				取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素。	
			nextAll()
				获得每个匹配元素集合中所有下面的同辈元素，选择性筛选的选择器。
			nextUntil()
				通过选择器，DOM节点，或jQuery对象得到每个元素之后的所有兄弟元素，但不包括匹配的元素。
			prev()
				取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合。选择性筛选的选择器。
			prevAll()
				获得集合中每个匹配元素的所有前面的兄弟元素，选择性筛选的选择器。
			prevUntil()
				获取每个元素但不包括选择器，DOM节点，或者jQuery对象匹配的元素的所有前面的兄弟元素。
			siblings()
				获得匹配元素集合中每个元素的兄弟元素,可以提供一个可选的选择器。
十九.工具类
	clearQueue()
		从列队中移除所有未执行的项。
	dequeue()
		执行匹配元素队列的下一个函数。	
	$.contains( container, contained )		
		检查一个DOM元素是另一个DOM元素的后代。	
	$.data( element, key, value )		
		存储任意数据到指定的元素,返回设置的值。	
	$.each( collection, callback(indexInArray, valueOfElement) )		
		一个通用的迭代函数，它可以用来无缝迭代对象和数组。数组和类似数组的对象通过一个长度属性（如一个函数的参数对象）来迭代数字索引，从0到length - 1。其他对象通过其属性名进行迭代。	
	$(selector).each()
		对jquery选择的元素进行迭代。
	$.extend( [deep ], target, object1 [, objectN ] )	
		 将两个或更多对象的内容合并到第一个对象。分深拷贝和浅拷贝
	$.fn.extend()		
		一个对象的内容合并到jQuery的原型，以提供新的jQuery实例方法。
	$.globalEval()		
		在全局上下文下执行一些JavaScript代码。	
	$.grep()		
		查找满足过滤函数的数组元素。原始数组不受影响。
	$.inArray()		
		在数组中查找指定值并返回它的索引（如果没有找到，则返回-1）。	
	$.isArray()		
		确定的参数是一个数组。	
	$.isEmptyObject()		
		检查对象是否为空（不包含任何属性）。	
	$.isFunction()		
		确定参数是否为一个Javascript 函数。	
	$.isNumeric()
		确定它的参数是否是一个数字。
	$.isPlainObject()
		测试对象是否是纯粹的对象（通过 "{}" 或者 "new Object" 创建的）
	$.isWindow()		
		确定参数是否为一个window对象。	
	$.isXMLDoc()		
		检查一个DOM节点是否在XML文档中（或者是一个XML文档）。	
	$.makeArray()		
		转换一个类似数组的对象成为真正的JavaScript数组。	
	$.map()		
		将一个数组中的所有元素转换到另一个数组中。	
	$.merge()		
		合并两个数组内容到第一个数组。	
	$.noop()		
		一个空函数。	
	$.now()		
		返回一个数字，表示当前时间。	
	$.parseHTML()		
		将字符串解析到一个DOM节点的数组中。	
	$.parseJSON()		
		接受一个标准格式的 JSON 字符串，并返回解析后的 JavaScript 对象。	
	$.parseXML()		
		解析一个字符串到一个XML文档。	
	$.proxy()		
		接受一个函数，然后返回一个新函数，并且这个新函数始终保持了特定的上下文语境。	
	$.queue()		
		显示在匹配的元素上的已经执行的函数列队。操作匹配元素上将要执行的函数队列。	
	$.removeData()		
		删除一个先前存储的数据片段。	
	$.trim()		
		去掉字符串起始和结尾的空格。	
	$.type()		
		确定JavaScript 对象的类型[[Class]] 。	
	$.unique()		
		删除数组中重复元素。只处理删除DOM元素数组，而不能处理字符串或者数字数组。	
	queue()		
		显示在匹配的元素上的已经执行的函数列队。在匹配元素上操作已经附加函数的列表。	
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
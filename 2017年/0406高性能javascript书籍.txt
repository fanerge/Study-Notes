一.加载和执行
	1.脚本位置
		将脚本放在底部。
	2.组织脚本
		合并js文件。
	3.无阻塞的脚本
		延迟的脚本 ---- script标签的defer属性（立即下载，在window.onload触发之前执行，与其他资源并行下载），HTML5中async属性	
		动态脚本 ---- var script = document.createElement('script'); script.src='demo.js';document.head.appendChild(script);
			判断动态脚本是否加载成功 w3c为script.onload IE为script.onreadystatechange(判断readyState为loaded || complete)
		XMLHttpRequest脚本注入 ---- 先创建一个XHR对象，再根据xhr.onreadystatechange事件中readyState 为 4 xhr.status 为 200时在动态创建script标签  
		推荐的无阻塞模式 ---- 先建立动态加载script代码的函数，再动态加载需要的script代码
二.数据存取
	1.javascript只有四种基本的数据存取位置
		字面量 ---- 字符串、数字、布尔值、对象、数组、函数、正则表达式、null、undefined
		本地变量 ---- var 等定义的数据存储单元
		数组元素 ---- 存储在数组对象内部，以数字作为索引
		对象成员 ---- 存储在js对象内部，以key进行访问
	2.管理作用域
		作用域链（内部属性[[scope]]）和标识符解析
			函数定义时 ---- 在作用域链[[scope]]中插入一个对象变量，它保存了对全局变量的引用
			函数执行时 ---- 创建一个执行环境（execution context）的内部对象，它将初始化作用域链为函数定义是产生的[[scope]]，并创建一个活动对象（activation object）保存着this值、参数、及局部变量，并将其推入作用域链的最前端。
		标识符解析的性能
			如果一个全局变量被访问多次，可以用一个局部变量来保存该全局变量，后面就使用该局部变量代替全局变量
		改变作用域链
			with ---- 给对象的所有属性创建一个变量（少用）
			try{}catch(e){}
		动态作用域
			with、try-catch、eval()
	3.闭包、作用域和内存
		原理：闭包代码执行时，会创建一个执行环境，它的作用域与属性[[scope]]中所引用的两个相同的作用域链对象一起被初始化，然后一个活动对象为闭包自身所创建。
		相当于创建3个对象：1.为自身的活动对象,2.父级函数的活动对象，3.父级函数对全局对象的引用
	4.对象成员	
		原型
			对象有两种成员类型：1.实例成员（也称为own成员）和 2.原型成员
			通过内部属性 __proto__来访问原型成员
		原型链
			book.__proto__ >> Book.prototype(继承Object所有方法) >> Object.prototype(null)
		嵌套成员
			window.location.href
		缓存对象成员值
			let className = element.className;
三.DOM编程
	1.浏览器中的DOM
		DOM用于操作HTML文档的程序接口(API)
	2.DOM访问与修改
		重绘和重排（几何）
	3.节点克隆
		element.cloneNode()
	4.HTML集合
		document.getElementsByName()、document.getElementsByTagName()、document.getElementsByClassName()
		document.images、document.links、document.forms
		访问集合元素时使用局部变量
	5.遍历DOM	
		childNodes、nextSibling
	6.选择合适的API
		querySelectorAll()、querySelector()
	7.重绘和重排（几何）	
		DOM树 ---- 表示页面结构
		渲染树 ---- 表示DOM节点如何显示
	8.最小化重绘和重排
		多次操作合并为一次操作
			element.style.cssText ="";
			使用class
	9.事件委托
		1.绑定事件到冒泡的元素，2.再判断事件源对象是否为你所期望的元素。
四.算法和流程控制		
	1.循环
		循环的类型：for、while、do-while(唯一的后侧循环)、for-in
		循环性能：
			减少迭代的工作量 ---- 局部变量保存数组长度、倒序循环
			减少迭代次数 ---- 达夫设备(每次循环处理多组数据)对于大数组使用
	2.基于函数的迭代
		array.forEach(function(val, ind, arr){});
		
	3.条件语句
		if-else、switch-case(适合离散值)
		优化if-else：将最可能出现的条件放在首位，二分法减少条件判断次数
		查找表(适合多个离散值)：
			var results = [result0,result1,result2,result3,result4,result5];
			return results[value];
	4.递归
		调用栈限制(溢出)
		递归模式
			1.自身调用自身
			2.两个函数项目调用(慎用)
		迭代(替代递归)
五.字符串和正则表达式
	1.字符串连接
		+、+= 操作符
	2.数组项合并
		Array.prototype.join
		String.prototype.concat
	3.正则表达式优化
		正则表达式工作原理
			编译 -- 设置起始位置 -- 匹配每个正则表达式字元(回溯) -- 匹配成功或失败
		提高正则表达式效率的方法
			关注如何让匹配更快失败
			正则表达式以简单、必需的字元开始
			使用量词模式，使它们后面的字元互斥
			减少分支数量，缩小分支范围
				cat|bat ---- [cb]at
				red|read ---- rea?d
				red|raw ---- r(?:ed|aw)
			使用非捕获组
			只捕获感兴趣的文本以减少后处理
			暴露必需的字元
			使用合适的量词
			把正则表达式赋值给变量并重用它们
			将复杂的正则表达式拆分为简单的片段(化繁为简)
	4.合适不使用正则表达式	
六.快速响应的用户界面
	1.浏览器UI线程 ---- 单线程，有一个队列放所有的任务，要么运行javascript，要么执行UI更新(包括重排和重绘)。
	2.浏览器限制 ---- 调用栈大小限制、长时间运行脚本限制 	
	3.使用定时器让出事件片段	
		setTimeout()、setInterval()
		使用定时器处理数组 至少25ms
		分割任务
	4.Web Workers
		Worker 运行环境 ---- 不能访问浏览器的许多资源。
		与Worker通信 ---- Worker与网页代码通过事件接口进行通信
			网页代码和Worker 传递数据通过postMessage()
			Worker 接收数据通过 onmessage 事件处理器
			加载外部文件 ---- importScripts()
		Web Workers 可以做的事
			解析一个字符串（json文件）
			编码/解码大字符串
			复杂数学运算(包括图像或视频处理)
			大数组排序
七.Ajax
	1.数据传输
		请求数据
			XMLHttpRequest(XHR)
			动态脚本注入(jsonp跨域)
			multipartXHR
		发送数据
			XHR
			图片信标(Beacons)
	2.数据格式
		XML
		JSON
		JSONP
		HTML
	3.Ajax性能指南
		缓存数据
			设置HTTP头信息 ---- Expires
			本地数据存储 ---- 本地对象缓存
		Ajax类库的局限
			不能访问 XMLHttpRequest 的完整功能
八.编程实践
	1.避免双重求值（以下函数中传入string时，这会导致在js代码中执行另一段js代码时，从而导致双重求值）
		eval()|Function()构造函数|setTimeout()|setInterval()

	2.使用Object/Array直接量（字面量）
	3.避免重复工作
		//问题为，每次调用该函数都将进行浏览器探测
			function addHandler(target, eventType, handler){
				if(target.addEventListener){ //W3C
					target.addEventListener(eventType, handler, false);
				}else{                       //IE
					target.attachEvent('on' + eventType, handler);
				}	
			}
		延迟加载（需要的时候再进行浏览器检测）
			//这里只会在初次调用时进行浏览器探测
			function addHandler(target, eventType, handler){
				//复写现有函数
				if(target.addEventListener){  //W3C
					addHandler = function(target, eventType, handler){
						target.addEventListener(eventType, handler, false);
					}
				}else{                       //IE 
					addHandler = function(target, eventType, handler){
						target.attachEvent('on' + eventType, handler);
					}
				}
				//调用新函数，用于第一次调用
				addHandler(target, eventType, handler);
			}
		条件预加载（加载js就进行浏览器检测）
			let addHandler = document.body.addEventListener ?
								function(target, eventType, handler){  //W3C
									target.addEventListener(eventType, handler, false);;
								}:
								function(target, eventType, handler){  //IE
									target.attachEvent('on' + eventType, handler);
								}
	4.使用速度最快的部分
		位操作 AND & OR | XOR ^ NOT ~
		原生方法  querySelector()、querySelectorAll()
九.构建并部署高性能javascript应用
	1.Apache Ant		
	2.合并多个javascript文件	
	3.预处理javascript文件	
	4.javascript压缩 ---- JSMin	、YUI Compressor 、 Closure Compiler
	5.构建时处理对比运行时处理
		javascript的http压缩（YUI Compressor + Gzip）
	6.缓存javascript文件 Expires(HTTP 响应头) 、HTML5离线缓存(mainfest)
	7.处理缓存问题 ---- 应用更新(一般在后面加上时间戳)
	8.使用内容分发网络（CDN）	
	9.部署javascript资源	
	10.敏捷javascript构建过程	
十.工具
	1.javascript性能分析
		YUI Profiler
	2.匿名函数	
	3.firebug(现停更)	
		console.profile() ---- console.profileEnd()
		console.time('demo') ---- console.timeEnd('demo')
	4.chrome开发人员工具	
	5.Page Speed	
	6.Fiddler ---- HTTP调试代理工具	
	7.YSlow	---- 观察页面初始加载和运行过程的整体性能
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
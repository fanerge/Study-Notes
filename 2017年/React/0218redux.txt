1.定义
	redux作为一个前端数据状态容器体现，并可以在 React 和其他任何前端框架中使用。
	store----应用数据的储存中心
	action----应用数据的改变的描述
	reducer----决定应用数据新状态的函数，接收应用之前的状态和一个 action 返回数据的新状态。
	middleware----redux 提供中间件的方式，完成一些 flux 流程的自定义控制，同时形成其插件体系
2.redux三原则
	单一的 store ---- 整个应用的数据以树状结构存放在一个 state 对象中。	
	state 只读 ---- state 包含的应用数据不能随意修改，修改数据的唯一方式是 dispatch action，action 描述要修改的信息
	数据的改变由纯函数生成（更改数据的整个过程）
		store.dispatch(action)
		newState = reducer(previousState, action) //reducer 为纯函数
3.安装redux----安装 redux 核心和 react-redux 集成进 react
	npm install --save redux
	npm install --save react-redux
4.redux中store对外的API
	获取数据 store.getState()
	通过触发 action 来更新数据 store.dispatch(action)
	pubsub 模式提供消息订阅和取消  store.subscribe(listener)
	创建并初始化store通过createStore
		如：var store = redux.createStore(reducer, initialState);
	触发action，修改数据
		store.dispatch({type: 'ADD_TODO',title: 'new todo'});
	消息订阅和取消
		订阅----store.subscribe(function(){  console.log(store.getState())})
		取消----var unsubscribe = store.subscribe(function(){ console.log(store.getState())})；unsubscribe();
5.设计应用数据结构
	业务数据和 UI 状态数据分离，尽量避免 UI 状态数据放在 store 中，即便放在 store 中也好和业务数据分离。
	避免嵌套，在一个复杂的场景，数据对象可能很深，出现多层，那在设计的时候可以通过 id 的方式来引用。
6.redux action
	action描述数据结构
		每个对象必须包含一个字段 type，应用通过 type 来识别 action 类型
	action类型常量
		为了项目的规范，通常把 action type 定义为名称常量，放在一个单独的文件中管理
		var ADD_TODO = "ADD_TODO"
		{
		  type: ADD_TODO,
		  text: 'Build my first Redux app'
		}
	action creator
		store.dispatch(addTodo(text))  //addTodo(text)为函数
7.redux reducer----reducer 决定应用数据的改变	
	reducer 组合----redux 提供了 combineReducers() 方法来简化
		var todoApp = redux.combineReducers({
		  visibilityFilter: visibilityFilter,
		  todos: todos
		})
8.redux数据流动
	第一步：调用 store.dispatch(action)	
		可以在任何地方触发 dispatch，例如 UI 交互，API 调用
	第二步： Redux store 调用 rootReducer
		redux 收到 action 过后，调用根 reducer 并返回最新的状态数据。（根 reducer 内部组合其他 reducer 返回部分的最新状态）
	第三步：接收新状态并 publish 给订阅者
		当 rootReducer 返回最新的状态后，通知订阅函数 store.subscribe(listener) 。在 React 中，可以订阅状态更新，在订阅函数中获取最新的状态过后，修改根组件的数据
		component.setState(newState)
9.Redux中间件是什么
	本质的目的是提供第三方插件的模式，自定义拦截action -> reducer 的过程。变为 action -> middlewares -> reducer 。
	这种机制可以让我们改变数据流，实现如异步 action ，action 过滤，日志输出，异常报告等功能。
10.使用Redux中间件
	Redux 提供了一个叫 applyMiddleware 的方法，可以应用多个中间件，以日志输出中间件为例
	如；import { createStore, applyMiddleware } from 'redux'
		import createLogger from 'redux-logger'
		import rootReducer from './reducers'

		const loggerMiddleware = createLogger()
		const initialState = {}

		return createStore(
			rootReducer,
			initialState,
			applyMiddleware(
			  loggerMiddleware
			)
		)
11.redux异步
	redux-thunk
		同步情况：dispatch(action)
		异步情况：dispatch(thunk)
		1安装 ---- npm install redux-thunk
		2添加中间件 ---- 
			import thunk from 'redux-thunk';
			const store = createStore(  rootReducer,  applyMiddleware(thunk));
		......	
	redux-promise
	redux-saga
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Javascript语言的执行环境是"单线程"（single thread）
为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）
一.回调函数
	如：f2必须f1执行之后执行
	function f1( callback ){
		//这是房f1函数的逻辑
		callback();  //最后执行回调
	}
	//调用时 f1(f2)
二.发布/订阅（Ben Alman的Tiny Pub/Sub写的jQuery插件）
	//f2向"信号中心"jQuery订阅"done"信号
	jQuery.subscribe('done', f2); 
	function f1(){
		//f1的逻辑
		//向"信号中心"jQuery发布"done"信号，从而引发f2的执行。
		jQuery.publish('done');
	}
	取消订阅
	jQuery.unsubscribe('done', f2);
	事件监听 -- 事件驱动模式（jquery的写法）
	f1.on('done', f2); //为f1绑定一个事件，表示当f1发生done事件，就执行f2
	f1.trigger('done'); //触发f1的done事件	
三.Promise对象
	思想：每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。
	var promise = new Promise(function( resolve, reject ){
		//some code
		if( /*异步成功*/ ){
			resolve(value);
		}else{
			reject(error);
		}
	});
	promise.then(function( value ){
		//成功后的处理逻辑
		console.log('success')
	})
	.catch(function( error ){
		//失败后的处理逻辑
		console.log('filaure')
	});
四.Generator函数
	整个Generator函数就是一个封装的异步任务，或者说是异步任务的容器。
	value属性是yield语句后面表达式的值，表示当前阶段的值；done属性是一个布尔值
	function* gen(x){
	  var y = yield x + 2;
	  return y;
	}
	var g = gen(1);
	g.next() // { value: 3, done: false }
	g.next() // { value: undefined, done: true }	
五.async-await
	async函数完全可以看作多个异步操作，包装成的一个Promise对象，而await命令就是内部then命令的语法糖。
	(async function (){
		try{
			let result= await fetch('https://api.3github.com/users/etoah');
			let json =await result.json();
			console.log("result:",json);
		}
		catch(ex){
			console.warn("warn:",ex);
		}
	})()
